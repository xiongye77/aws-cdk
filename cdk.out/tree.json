{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree"
      },
      "vpc": {
        "id": "vpc",
        "path": "vpc",
        "children": {
          "devVPC": {
            "id": "devVPC",
            "path": "vpc/devVPC",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "vpc/devVPC/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPC",
                  "aws:cdk:cloudformation:props": {
                    "cidrBlock": "172.32.0.0/16",
                    "enableDnsHostnames": true,
                    "enableDnsSupport": true,
                    "instanceTenancy": "default",
                    "tags": [
                      {
                        "key": "Cost Center",
                        "value": "AABBCC"
                      },
                      {
                        "key": "Department",
                        "value": "R&D"
                      },
                      {
                        "key": "Name",
                        "value": "vpc/devVPC"
                      }
                    ]
                  }
                }
              },
              "PublicSubnet1": {
                "id": "PublicSubnet1",
                "path": "vpc/devVPC/PublicSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/PublicSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.0.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Public"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/PublicSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/PublicSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/PublicSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPublicSubnet1RouteTableD693476A"
                        },
                        "subnetId": {
                          "Ref": "devVPCPublicSubnet1Subnet2E5540AB"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "vpc/devVPC/PublicSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPublicSubnet1RouteTableD693476A"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "devVPCIGW3A5029B7"
                        }
                      }
                    }
                  },
                  "EIP": {
                    "id": "EIP",
                    "path": "vpc/devVPC/PublicSubnet1/EIP",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::EIP",
                      "aws:cdk:cloudformation:props": {
                        "domain": "vpc",
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "NATGateway": {
                    "id": "NATGateway",
                    "path": "vpc/devVPC/PublicSubnet1/NATGateway",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::NatGateway",
                      "aws:cdk:cloudformation:props": {
                        "allocationId": {
                          "Fn::GetAtt": [
                            "devVPCPublicSubnet1EIP3F331112",
                            "AllocationId"
                          ]
                        },
                        "subnetId": {
                          "Ref": "devVPCPublicSubnet1Subnet2E5540AB"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet1"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "PublicSubnet2": {
                "id": "PublicSubnet2",
                "path": "vpc/devVPC/PublicSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/PublicSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.1.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": true,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Public"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Public"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/PublicSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/PublicSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PublicSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/PublicSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPublicSubnet2RouteTable263FF99F"
                        },
                        "subnetId": {
                          "Ref": "devVPCPublicSubnet2Subnet2C6C27AC"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "vpc/devVPC/PublicSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPublicSubnet2RouteTable263FF99F"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "gatewayId": {
                          "Ref": "devVPCIGW3A5029B7"
                        }
                      }
                    }
                  }
                }
              },
              "PrivateSubnet1": {
                "id": "PrivateSubnet1",
                "path": "vpc/devVPC/PrivateSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/PrivateSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.2.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Private"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PrivateSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/PrivateSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/PrivateSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PrivateSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/PrivateSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPrivateSubnet1RouteTable46900521"
                        },
                        "subnetId": {
                          "Ref": "devVPCPrivateSubnet1Subnet712E0217"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "vpc/devVPC/PrivateSubnet1/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPrivateSubnet1RouteTable46900521"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "devVPCPublicSubnet1NATGatewayED579EE6"
                        }
                      }
                    }
                  }
                }
              },
              "PrivateSubnet2": {
                "id": "PrivateSubnet2",
                "path": "vpc/devVPC/PrivateSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/PrivateSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.3.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Private"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Private"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PrivateSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/PrivateSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/PrivateSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/PrivateSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/PrivateSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPrivateSubnet2RouteTableBCC75866"
                        },
                        "subnetId": {
                          "Ref": "devVPCPrivateSubnet2SubnetAA0D521D"
                        }
                      }
                    }
                  },
                  "DefaultRoute": {
                    "id": "DefaultRoute",
                    "path": "vpc/devVPC/PrivateSubnet2/DefaultRoute",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Route",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCPrivateSubnet2RouteTableBCC75866"
                        },
                        "destinationCidrBlock": "0.0.0.0/0",
                        "natGatewayId": {
                          "Ref": "devVPCPublicSubnet1NATGatewayED579EE6"
                        }
                      }
                    }
                  }
                }
              },
              "IsolatedSubnet1": {
                "id": "IsolatedSubnet1",
                "path": "vpc/devVPC/IsolatedSubnet1",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/IsolatedSubnet1/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.4.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            0,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Isolated"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Isolated"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/IsolatedSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/IsolatedSubnet1/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/IsolatedSubnet1/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/IsolatedSubnet1"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/IsolatedSubnet1/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCIsolatedSubnet1RouteTableFB79FE72"
                        },
                        "subnetId": {
                          "Ref": "devVPCIsolatedSubnet1Subnet1A2735F3"
                        }
                      }
                    }
                  }
                }
              },
              "IsolatedSubnet2": {
                "id": "IsolatedSubnet2",
                "path": "vpc/devVPC/IsolatedSubnet2",
                "children": {
                  "Subnet": {
                    "id": "Subnet",
                    "path": "vpc/devVPC/IsolatedSubnet2/Subnet",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::Subnet",
                      "aws:cdk:cloudformation:props": {
                        "cidrBlock": "172.32.5.0/24",
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "availabilityZone": {
                          "Fn::Select": [
                            1,
                            {
                              "Fn::GetAZs": ""
                            }
                          ]
                        },
                        "mapPublicIpOnLaunch": false,
                        "tags": [
                          {
                            "key": "aws-cdk:subnet-name",
                            "value": "Isolated"
                          },
                          {
                            "key": "aws-cdk:subnet-type",
                            "value": "Isolated"
                          },
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/IsolatedSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "Acl": {
                    "id": "Acl",
                    "path": "vpc/devVPC/IsolatedSubnet2/Acl"
                  },
                  "RouteTable": {
                    "id": "RouteTable",
                    "path": "vpc/devVPC/IsolatedSubnet2/RouteTable",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::RouteTable",
                      "aws:cdk:cloudformation:props": {
                        "vpcId": {
                          "Ref": "devVPC524BF54C"
                        },
                        "tags": [
                          {
                            "key": "Cost Center",
                            "value": "AABBCC"
                          },
                          {
                            "key": "Department",
                            "value": "R&D"
                          },
                          {
                            "key": "Name",
                            "value": "vpc/devVPC/IsolatedSubnet2"
                          }
                        ]
                      }
                    }
                  },
                  "RouteTableAssociation": {
                    "id": "RouteTableAssociation",
                    "path": "vpc/devVPC/IsolatedSubnet2/RouteTableAssociation",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SubnetRouteTableAssociation",
                      "aws:cdk:cloudformation:props": {
                        "routeTableId": {
                          "Ref": "devVPCIsolatedSubnet2RouteTable4AEAC114"
                        },
                        "subnetId": {
                          "Ref": "devVPCIsolatedSubnet2SubnetD2338F17"
                        }
                      }
                    }
                  }
                }
              },
              "IGW": {
                "id": "IGW",
                "path": "vpc/devVPC/IGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::InternetGateway",
                  "aws:cdk:cloudformation:props": {
                    "tags": [
                      {
                        "key": "Cost Center",
                        "value": "AABBCC"
                      },
                      {
                        "key": "Department",
                        "value": "R&D"
                      },
                      {
                        "key": "Name",
                        "value": "vpc/devVPC"
                      }
                    ]
                  }
                }
              },
              "VPCGW": {
                "id": "VPCGW",
                "path": "vpc/devVPC/VPCGW",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::VPCGatewayAttachment",
                  "aws:cdk:cloudformation:props": {
                    "vpcId": {
                      "Ref": "devVPC524BF54C"
                    },
                    "internetGatewayId": {
                      "Ref": "devVPCIGW3A5029B7"
                    }
                  }
                }
              }
            }
          },
          "VPCoutput": {
            "id": "VPCoutput",
            "path": "vpc/VPCoutput"
          },
          "VPCoutputprivatenets1": {
            "id": "VPCoutputprivatenets1",
            "path": "vpc/VPCoutputprivatenets1"
          },
          "private-subnet-1": {
            "id": "private-subnet-1",
            "path": "vpc/private-subnet-1",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "vpc/private-subnet-1/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "devVPCPrivateSubnet1Subnet712E0217"
                    },
                    "name": "/dev/private-subnet-1"
                  }
                }
              }
            }
          },
          "VPCoutputprivatenets2": {
            "id": "VPCoutputprivatenets2",
            "path": "vpc/VPCoutputprivatenets2"
          },
          "private-subnet-2": {
            "id": "private-subnet-2",
            "path": "vpc/private-subnet-2",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "vpc/private-subnet-2/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "devVPCPrivateSubnet2SubnetAA0D521D"
                    },
                    "name": "/dev/private-subnet-2"
                  }
                }
              }
            }
          },
          "VPCoutputpublicnets1": {
            "id": "VPCoutputpublicnets1",
            "path": "vpc/VPCoutputpublicnets1"
          },
          "public-subnet-1": {
            "id": "public-subnet-1",
            "path": "vpc/public-subnet-1",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "vpc/public-subnet-1/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "devVPCPublicSubnet1Subnet2E5540AB"
                    },
                    "name": "/dev/public-subnet-1"
                  }
                }
              }
            }
          },
          "VPCoutputpublicnets2": {
            "id": "VPCoutputpublicnets2",
            "path": "vpc/VPCoutputpublicnets2"
          },
          "public-subnet-2": {
            "id": "public-subnet-2",
            "path": "vpc/public-subnet-2",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "vpc/public-subnet-2/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "devVPCPublicSubnet2Subnet2C6C27AC"
                    },
                    "name": "/dev/public-subnet-2"
                  }
                }
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "vpc/Exports",
            "children": {
              "Output{\"Ref\":\"devVPC524BF54C\"}": {
                "id": "Output{\"Ref\":\"devVPC524BF54C\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPC524BF54C\"}"
              },
              "Output{\"Ref\":\"devVPCPublicSubnet1Subnet2E5540AB\"}": {
                "id": "Output{\"Ref\":\"devVPCPublicSubnet1Subnet2E5540AB\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCPublicSubnet1Subnet2E5540AB\"}"
              },
              "Output{\"Ref\":\"devVPCPublicSubnet2Subnet2C6C27AC\"}": {
                "id": "Output{\"Ref\":\"devVPCPublicSubnet2Subnet2C6C27AC\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCPublicSubnet2Subnet2C6C27AC\"}"
              },
              "Output{\"Ref\":\"devVPCPrivateSubnet1Subnet712E0217\"}": {
                "id": "Output{\"Ref\":\"devVPCPrivateSubnet1Subnet712E0217\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCPrivateSubnet1Subnet712E0217\"}"
              },
              "Output{\"Ref\":\"devVPCPrivateSubnet2SubnetAA0D521D\"}": {
                "id": "Output{\"Ref\":\"devVPCPrivateSubnet2SubnetAA0D521D\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCPrivateSubnet2SubnetAA0D521D\"}"
              },
              "Output{\"Ref\":\"devVPCIsolatedSubnet1Subnet1A2735F3\"}": {
                "id": "Output{\"Ref\":\"devVPCIsolatedSubnet1Subnet1A2735F3\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCIsolatedSubnet1Subnet1A2735F3\"}"
              },
              "Output{\"Ref\":\"devVPCIsolatedSubnet2SubnetD2338F17\"}": {
                "id": "Output{\"Ref\":\"devVPCIsolatedSubnet2SubnetD2338F17\"}",
                "path": "vpc/Exports/Output{\"Ref\":\"devVPCIsolatedSubnet2SubnetD2338F17\"}"
              }
            }
          }
        }
      },
      "security-stack": {
        "id": "security-stack",
        "path": "security-stack",
        "children": {
          "lambdasg": {
            "id": "lambdasg",
            "path": "security-stack/lambdasg",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/lambdasg/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "SG for Lambda Functions",
                    "groupName": "lambda-sg",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "vpcId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                    }
                  }
                }
              }
            }
          },
          "bastionsg": {
            "id": "bastionsg",
            "path": "security-stack/bastionsg",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/bastionsg/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "SG for Bastion Host",
                    "groupName": "bastion-sg",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "securityGroupIngress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "ipProtocol": "tcp",
                        "fromPort": 22,
                        "toPort": 22,
                        "description": "SSH Access"
                      }
                    ],
                    "vpcId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                    }
                  }
                }
              }
            }
          },
          "redissg": {
            "id": "redissg",
            "path": "security-stack/redissg",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/redissg/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "SG for Redis Cluster",
                    "groupName": "redis-sg",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "vpcId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                    }
                  }
                }
              },
              "from securitystacklambdasgF241D9AE:6379": {
                "id": "from securitystacklambdasgF241D9AE:6379",
                "path": "security-stack/redissg/from securitystacklambdasgF241D9AE:6379",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "description": "Access from Lambda functions",
                    "fromPort": 6379,
                    "groupId": {
                      "Fn::GetAtt": [
                        "redissg9A3AB737",
                        "GroupId"
                      ]
                    },
                    "sourceSecurityGroupId": {
                      "Fn::GetAtt": [
                        "lambdasg77597EA8",
                        "GroupId"
                      ]
                    },
                    "toPort": 6379
                  }
                }
              }
            }
          },
          "kibanasg": {
            "id": "kibanasg",
            "path": "security-stack/kibanasg",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/kibanasg/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                  "aws:cdk:cloudformation:props": {
                    "groupDescription": "SG for Kibana",
                    "groupName": "kibana-sg",
                    "securityGroupEgress": [
                      {
                        "cidrIp": "0.0.0.0/0",
                        "description": "Allow all outbound traffic by default",
                        "ipProtocol": "-1"
                      }
                    ],
                    "vpcId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                    }
                  }
                }
              },
              "from securitystackbastionsg905E81FD:443": {
                "id": "from securitystackbastionsg905E81FD:443",
                "path": "security-stack/kibanasg/from securitystackbastionsg905E81FD:443",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                  "aws:cdk:cloudformation:props": {
                    "ipProtocol": "tcp",
                    "description": "Access from jumpbox",
                    "fromPort": 443,
                    "groupId": {
                      "Fn::GetAtt": [
                        "kibanasg882A09E7",
                        "GroupId"
                      ]
                    },
                    "sourceSecurityGroupId": {
                      "Fn::GetAtt": [
                        "bastionsg1FA4DDAF",
                        "GroupId"
                      ]
                    },
                    "toPort": 443
                  }
                }
              }
            }
          },
          "kibanarole": {
            "id": "kibanarole",
            "path": "security-stack/kibanarole",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::IAM::ServiceLinkedRole",
              "aws:cdk:cloudformation:props": {
                "awsServiceName": "es.amazonaws.com"
              }
            }
          },
          "lambdarole": {
            "id": "lambdarole",
            "path": "security-stack/lambdarole",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/lambdarole/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "lambda.amazonaws.com"
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "managedPolicyArns": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                          ]
                        ]
                      }
                    ],
                    "roleName": "lambda-role"
                  }
                }
              },
              "DefaultPolicy": {
                "id": "DefaultPolicy",
                "path": "security-stack/lambdarole/DefaultPolicy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "security-stack/lambdarole/DefaultPolicy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                      "aws:cdk:cloudformation:props": {
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": [
                                "s3:*",
                                "rds:*"
                              ],
                              "Effect": "Allow",
                              "Resource": "*"
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policyName": "lambdaroleDefaultPolicy75A97119",
                        "roles": [
                          {
                            "Ref": "lambdarole0D0C6BDF"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "redis-export": {
            "id": "redis-export",
            "path": "security-stack/redis-export"
          },
          "lambdasg-param": {
            "id": "lambdasg-param",
            "path": "security-stack/lambdasg-param",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/lambdasg-param/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "lambdasg77597EA8",
                        "GroupId"
                      ]
                    },
                    "name": "/dev/lambda-sg"
                  }
                }
              }
            }
          },
          "lambdarole-param-arn": {
            "id": "lambdarole-param-arn",
            "path": "security-stack/lambdarole-param-arn",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/lambdarole-param-arn/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "lambdarole0D0C6BDF",
                        "Arn"
                      ]
                    },
                    "name": "/dev/lambda-role-arn"
                  }
                }
              }
            }
          },
          "lambdarole-param-name": {
            "id": "lambdarole-param-name",
            "path": "security-stack/lambdarole-param-name",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "security-stack/lambdarole-param-name/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "lambdarole0D0C6BDF"
                    },
                    "name": "/dev/lambda-role-name"
                  }
                }
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "security-stack/Exports",
            "children": {
              "Output{\"Fn::GetAtt\":[\"bastionsg1FA4DDAF\",\"GroupId\"]}": {
                "id": "Output{\"Fn::GetAtt\":[\"bastionsg1FA4DDAF\",\"GroupId\"]}",
                "path": "security-stack/Exports/Output{\"Fn::GetAtt\":[\"bastionsg1FA4DDAF\",\"GroupId\"]}"
              },
              "Output{\"Fn::GetAtt\":[\"lambdasg77597EA8\",\"GroupId\"]}": {
                "id": "Output{\"Fn::GetAtt\":[\"lambdasg77597EA8\",\"GroupId\"]}",
                "path": "security-stack/Exports/Output{\"Fn::GetAtt\":[\"lambdasg77597EA8\",\"GroupId\"]}"
              },
              "Output{\"Fn::GetAtt\":[\"kibanasg882A09E7\",\"GroupId\"]}": {
                "id": "Output{\"Fn::GetAtt\":[\"kibanasg882A09E7\",\"GroupId\"]}",
                "path": "security-stack/Exports/Output{\"Fn::GetAtt\":[\"kibanasg882A09E7\",\"GroupId\"]}"
              }
            }
          }
        }
      },
      "ec2": {
        "id": "ec2",
        "path": "ec2",
        "children": {
          "myAlbId": {
            "id": "myAlbId",
            "path": "ec2/myAlbId",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ec2/myAlbId/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
                  "aws:cdk:cloudformation:props": {
                    "name": "WebServerAlb",
                    "scheme": "internet-facing",
                    "securityGroups": [
                      {
                        "Fn::GetAtt": [
                          "myAlbIdSecurityGroup6428301A",
                          "GroupId"
                        ]
                      }
                    ],
                    "subnets": [
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPublicSubnet1Subnet2E5540ABA39DCC67"
                      },
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPublicSubnet2Subnet2C6C27ACD536E4EE"
                      }
                    ],
                    "type": "application"
                  }
                }
              },
              "SecurityGroup": {
                "id": "SecurityGroup",
                "path": "ec2/myAlbId/SecurityGroup",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ec2/myAlbId/SecurityGroup/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                      "aws:cdk:cloudformation:props": {
                        "groupDescription": "Automatically created Security Group for ELB ec2myAlbIdD680A2AE",
                        "securityGroupIngress": [
                          {
                            "cidrIp": "0.0.0.0/0",
                            "ipProtocol": "tcp",
                            "fromPort": 80,
                            "toPort": 80,
                            "description": "Allow Internet access on ALB Port 80"
                          }
                        ],
                        "vpcId": {
                          "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                        }
                      }
                    }
                  },
                  "to ec2webServerAsgIdInstanceSecurityGroupD9665208:80": {
                    "id": "to ec2webServerAsgIdInstanceSecurityGroupD9665208:80",
                    "path": "ec2/myAlbId/SecurityGroup/to ec2webServerAsgIdInstanceSecurityGroupD9665208:80",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupEgress",
                      "aws:cdk:cloudformation:props": {
                        "groupId": {
                          "Fn::GetAtt": [
                            "myAlbIdSecurityGroup6428301A",
                            "GroupId"
                          ]
                        },
                        "ipProtocol": "tcp",
                        "description": "Allows ASG Security Group receive traffic from ALB",
                        "destinationSecurityGroupId": {
                          "Fn::GetAtt": [
                            "webServerAsgIdInstanceSecurityGroup91DE0BE3",
                            "GroupId"
                          ]
                        },
                        "fromPort": 80,
                        "toPort": 80
                      }
                    }
                  }
                }
              },
              "listernerId": {
                "id": "listernerId",
                "path": "ec2/myAlbId/listernerId",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ec2/myAlbId/listernerId/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::Listener",
                      "aws:cdk:cloudformation:props": {
                        "defaultActions": [
                          {
                            "type": "forward",
                            "targetGroupArn": {
                              "Ref": "myAlbIdlisternerIdlistenerIdGroup80F930FC"
                            }
                          }
                        ],
                        "loadBalancerArn": {
                          "Ref": "myAlbIdF3EF6ABD"
                        },
                        "port": 80,
                        "protocol": "HTTP"
                      }
                    }
                  },
                  "listenerIdGroup": {
                    "id": "listenerIdGroup",
                    "path": "ec2/myAlbId/listernerId/listenerIdGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ec2/myAlbId/listernerId/listenerIdGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                          "aws:cdk:cloudformation:props": {
                            "port": 80,
                            "protocol": "HTTP",
                            "targetType": "instance",
                            "vpcId": {
                              "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "webServerRoleId": {
            "id": "webServerRoleId",
            "path": "ec2/webServerRoleId",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ec2/webServerRoleId/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": {
                              "Fn::Join": [
                                "",
                                [
                                  "ec2.",
                                  {
                                    "Ref": "AWS::URLSuffix"
                                  }
                                ]
                              ]
                            }
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "managedPolicyArns": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":iam::aws:policy/AmazonSSMManagedInstanceCore"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":iam::aws:policy/AmazonS3ReadOnlyAccess"
                          ]
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "webServerAsgId": {
            "id": "webServerAsgId",
            "path": "ec2/webServerAsgId",
            "children": {
              "InstanceSecurityGroup": {
                "id": "InstanceSecurityGroup",
                "path": "ec2/webServerAsgId/InstanceSecurityGroup",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ec2/webServerAsgId/InstanceSecurityGroup/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                      "aws:cdk:cloudformation:props": {
                        "groupDescription": "ec2/webServerAsgId/InstanceSecurityGroup",
                        "securityGroupEgress": [
                          {
                            "cidrIp": "0.0.0.0/0",
                            "description": "Allow all outbound traffic by default",
                            "ipProtocol": "-1"
                          }
                        ],
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ec2/webServerAsgId"
                          }
                        ],
                        "vpcId": {
                          "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                        }
                      }
                    }
                  },
                  "from ec2myAlbIdSecurityGroup8B1A3880:80": {
                    "id": "from ec2myAlbIdSecurityGroup8B1A3880:80",
                    "path": "ec2/webServerAsgId/InstanceSecurityGroup/from ec2myAlbIdSecurityGroup8B1A3880:80",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                      "aws:cdk:cloudformation:props": {
                        "ipProtocol": "tcp",
                        "description": "Allows ASG Security Group receive traffic from ALB",
                        "fromPort": 80,
                        "groupId": {
                          "Fn::GetAtt": [
                            "webServerAsgIdInstanceSecurityGroup91DE0BE3",
                            "GroupId"
                          ]
                        },
                        "sourceSecurityGroupId": {
                          "Fn::GetAtt": [
                            "myAlbIdSecurityGroup6428301A",
                            "GroupId"
                          ]
                        },
                        "toPort": 80
                      }
                    }
                  }
                }
              },
              "InstanceProfile": {
                "id": "InstanceProfile",
                "path": "ec2/webServerAsgId/InstanceProfile",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                  "aws:cdk:cloudformation:props": {
                    "roles": [
                      {
                        "Ref": "webServerRoleId125658B3"
                      }
                    ]
                  }
                }
              },
              "LaunchConfig": {
                "id": "LaunchConfig",
                "path": "ec2/webServerAsgId/LaunchConfig",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AutoScaling::LaunchConfiguration",
                  "aws:cdk:cloudformation:props": {
                    "imageId": {
                      "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
                    },
                    "instanceType": "t2.micro",
                    "iamInstanceProfile": {
                      "Ref": "webServerAsgIdInstanceProfileF79FE114"
                    },
                    "securityGroups": [
                      {
                        "Fn::GetAtt": [
                          "webServerAsgIdInstanceSecurityGroup91DE0BE3",
                          "GroupId"
                        ]
                      }
                    ],
                    "userData": {
                      "Fn::Base64": "\n#!/bin/bash -xe\n\n# Lets log everything to console for being lazy (not recommended)\n# exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n\nsudo yum install -y httpd\nIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\necho \"<html><head><title>Modern Web App</title><style>body {margin-top: 40px;background-color: #333;}</style></head><body><div style=color:white;text-align:center><h1 style='font-size:7vw;'>Modern Web App</h1><p>Congratulations! Your Web Server is Online.</p><small>Pages served from $IP</small></div></body></html>\" >> /var/www/html/index.html\nsudo chkconfig httpd on\nsudo service httpd start\n"
                    }
                  }
                }
              },
              "ASG": {
                "id": "ASG",
                "path": "ec2/webServerAsgId/ASG",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AutoScaling::AutoScalingGroup",
                  "aws:cdk:cloudformation:props": {
                    "maxSize": "2",
                    "minSize": "2",
                    "launchConfigurationName": {
                      "Ref": "webServerAsgIdLaunchConfig91E1AEAF"
                    },
                    "tags": [
                      {
                        "key": "Name",
                        "value": "ec2/webServerAsgId",
                        "propagateAtLaunch": true
                      }
                    ],
                    "targetGroupArns": [
                      {
                        "Ref": "myAlbIdlisternerIdlistenerIdGroup80F930FC"
                      }
                    ],
                    "vpcZoneIdentifier": [
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet1Subnet712E02178AFD203D"
                      },
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet2SubnetAA0D521D667E9B43"
                      }
                    ]
                  }
                }
              }
            }
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "path": "ec2/SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter"
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "path": "ec2/SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118"
          },
          "albDomainName": {
            "id": "albDomainName",
            "path": "ec2/albDomainName"
          },
          "ALB-name": {
            "id": "ALB-name",
            "path": "ec2/ALB-name"
          },
          "ALB-ARN": {
            "id": "ALB-ARN",
            "path": "ec2/ALB-ARN"
          },
          "ALB-Listener-ARN": {
            "id": "ALB-Listener-ARN",
            "path": "ec2/ALB-Listener-ARN"
          }
        }
      },
      "ecs": {
        "id": "ecs",
        "path": "ecs",
        "children": {
          "webServiceCluster": {
            "id": "webServiceCluster",
            "path": "ecs/webServiceCluster",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ecs/webServiceCluster/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Cluster",
                  "aws:cdk:cloudformation:props": {}
                }
              },
              "microServiceAutoScalingGroup": {
                "id": "microServiceAutoScalingGroup",
                "path": "ecs/webServiceCluster/microServiceAutoScalingGroup",
                "children": {
                  "InstanceSecurityGroup": {
                    "id": "InstanceSecurityGroup",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceSecurityGroup",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceSecurityGroup/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                          "aws:cdk:cloudformation:props": {
                            "groupDescription": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceSecurityGroup",
                            "securityGroupEgress": [
                              {
                                "cidrIp": "0.0.0.0/0",
                                "description": "Allow all outbound traffic by default",
                                "ipProtocol": "-1"
                              }
                            ],
                            "tags": [
                              {
                                "key": "Name",
                                "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                              }
                            ],
                            "vpcId": {
                              "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                            }
                          }
                        }
                      }
                    }
                  },
                  "InstanceRole": {
                    "id": "InstanceRole",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "ec2.",
                                          {
                                            "Ref": "AWS::URLSuffix"
                                          }
                                        ]
                                      ]
                                    }
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "tags": [
                              {
                                "key": "Name",
                                "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                              }
                            ]
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "ecr:GetAuthorizationToken",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": "*"
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "webServiceClustermicroServiceAutoScalingGroupInstanceRoleDefaultPolicy629DB955",
                                "roles": [
                                  {
                                    "Ref": "webServiceClustermicroServiceAutoScalingGroupInstanceRoleFBC534F6"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "InstanceProfile": {
                    "id": "InstanceProfile",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/InstanceProfile",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                      "aws:cdk:cloudformation:props": {
                        "roles": [
                          {
                            "Ref": "webServiceClustermicroServiceAutoScalingGroupInstanceRoleFBC534F6"
                          }
                        ]
                      }
                    }
                  },
                  "LaunchConfig": {
                    "id": "LaunchConfig",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LaunchConfig",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AutoScaling::LaunchConfiguration",
                      "aws:cdk:cloudformation:props": {
                        "imageId": {
                          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
                        },
                        "instanceType": "t2.micro",
                        "iamInstanceProfile": {
                          "Ref": "webServiceClustermicroServiceAutoScalingGroupInstanceProfile3A053F57"
                        },
                        "securityGroups": [
                          {
                            "Fn::GetAtt": [
                              "webServiceClustermicroServiceAutoScalingGroupInstanceSecurityGroup7142E704",
                              "GroupId"
                            ]
                          }
                        ],
                        "userData": {
                          "Fn::Base64": {
                            "Fn::Join": [
                              "",
                              [
                                "#!/bin/bash\necho ECS_CLUSTER=",
                                {
                                  "Ref": "webServiceCluster5D072757"
                                },
                                " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
                              ]
                            ]
                          }
                        }
                      }
                    }
                  },
                  "ASG": {
                    "id": "ASG",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/ASG",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AutoScaling::AutoScalingGroup",
                      "aws:cdk:cloudformation:props": {
                        "maxSize": "1",
                        "minSize": "1",
                        "launchConfigurationName": {
                          "Ref": "webServiceClustermicroServiceAutoScalingGroupLaunchConfig67999DE6"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ecs/webServiceCluster/microServiceAutoScalingGroup",
                            "propagateAtLaunch": true
                          }
                        ],
                        "vpcZoneIdentifier": [
                          {
                            "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet1Subnet712E02178AFD203D"
                          },
                          {
                            "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet2SubnetAA0D521D667E9B43"
                          }
                        ]
                      }
                    }
                  },
                  "DrainECSHook": {
                    "id": "DrainECSHook",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook",
                    "children": {
                      "Function": {
                        "id": "Function",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function",
                        "children": {
                          "ServiceRole": {
                            "id": "ServiceRole",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/ServiceRole",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                                  "aws:cdk:cloudformation:props": {
                                    "assumeRolePolicyDocument": {
                                      "Statement": [
                                        {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": {
                                            "Service": "lambda.amazonaws.com"
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "managedPolicyArns": [
                                      {
                                        "Fn::Join": [
                                          "",
                                          [
                                            "arn:",
                                            {
                                              "Ref": "AWS::Partition"
                                            },
                                            ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                          ]
                                        ]
                                      }
                                    ],
                                    "tags": [
                                      {
                                        "key": "Name",
                                        "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                                      }
                                    ]
                                  }
                                }
                              },
                              "DefaultPolicy": {
                                "id": "DefaultPolicy",
                                "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy",
                                "children": {
                                  "Resource": {
                                    "id": "Resource",
                                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource",
                                    "attributes": {
                                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                      "aws:cdk:cloudformation:props": {
                                        "policyDocument": {
                                          "Statement": [
                                            {
                                              "Action": [
                                                "ec2:DescribeInstances",
                                                "ec2:DescribeInstanceAttribute",
                                                "ec2:DescribeInstanceStatus",
                                                "ec2:DescribeHosts"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            },
                                            {
                                              "Action": "autoscaling:CompleteLifecycleAction",
                                              "Effect": "Allow",
                                              "Resource": {
                                                "Fn::Join": [
                                                  "",
                                                  [
                                                    "arn:",
                                                    {
                                                      "Ref": "AWS::Partition"
                                                    },
                                                    ":autoscaling:",
                                                    {
                                                      "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                      "Ref": "AWS::AccountId"
                                                    },
                                                    ":autoScalingGroup:*:autoScalingGroupName/",
                                                    {
                                                      "Ref": "webServiceClustermicroServiceAutoScalingGroupASG0EF2B4FE"
                                                    }
                                                  ]
                                                ]
                                              }
                                            },
                                            {
                                              "Action": [
                                                "ecs:DescribeContainerInstances",
                                                "ecs:DescribeTasks"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            },
                                            {
                                              "Action": [
                                                "ecs:ListContainerInstances",
                                                "ecs:SubmitContainerStateChange",
                                                "ecs:SubmitTaskStateChange"
                                              ],
                                              "Effect": "Allow",
                                              "Resource": {
                                                "Fn::GetAtt": [
                                                  "webServiceCluster5D072757",
                                                  "Arn"
                                                ]
                                              }
                                            },
                                            {
                                              "Action": [
                                                "ecs:UpdateContainerInstancesState",
                                                "ecs:ListTasks"
                                              ],
                                              "Condition": {
                                                "ArnEquals": {
                                                  "ecs:cluster": {
                                                    "Fn::GetAtt": [
                                                      "webServiceCluster5D072757",
                                                      "Arn"
                                                    ]
                                                  }
                                                }
                                              },
                                              "Effect": "Allow",
                                              "Resource": "*"
                                            }
                                          ],
                                          "Version": "2012-10-17"
                                        },
                                        "policyName": "webServiceClustermicroServiceAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyE67ED128",
                                        "roles": [
                                          {
                                            "Ref": "webServiceClustermicroServiceAutoScalingGroupDrainECSHookFunctionServiceRole80558B13"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                              "aws:cdk:cloudformation:props": {
                                "code": {
                                  "zipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
                                },
                                "handler": "index.lambda_handler",
                                "role": {
                                  "Fn::GetAtt": [
                                    "webServiceClustermicroServiceAutoScalingGroupDrainECSHookFunctionServiceRole80558B13",
                                    "Arn"
                                  ]
                                },
                                "runtime": "python3.6",
                                "environment": {
                                  "variables": {
                                    "CLUSTER": {
                                      "Ref": "webServiceCluster5D072757"
                                    }
                                  }
                                },
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                                  }
                                ],
                                "timeout": 310
                              }
                            }
                          },
                          "AllowInvoke:ecswebServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopicB18DD55C": {
                            "id": "AllowInvoke:ecswebServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopicB18DD55C",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/AllowInvoke:ecswebServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopicB18DD55C",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                              "aws:cdk:cloudformation:props": {
                                "action": "lambda:InvokeFunction",
                                "functionName": {
                                  "Fn::GetAtt": [
                                    "webServiceClustermicroServiceAutoScalingGroupDrainECSHookFunction5D496EF2",
                                    "Arn"
                                  ]
                                },
                                "principal": "sns.amazonaws.com",
                                "sourceArn": {
                                  "Ref": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopic5AAAFBD6"
                                }
                              }
                            }
                          },
                          "Topic": {
                            "id": "Topic",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/Topic",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/DrainECSHook/Function/Topic/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::SNS::Subscription",
                                  "aws:cdk:cloudformation:props": {
                                    "protocol": "lambda",
                                    "topicArn": {
                                      "Ref": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopic5AAAFBD6"
                                    },
                                    "endpoint": {
                                      "Fn::GetAtt": [
                                        "webServiceClustermicroServiceAutoScalingGroupDrainECSHookFunction5D496EF2",
                                        "Arn"
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "LifecycleHookDrainHook": {
                    "id": "LifecycleHookDrainHook",
                    "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook",
                    "children": {
                      "Role": {
                        "id": "Role",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Role",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Role/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "autoscaling.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                                  }
                                ]
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": "sns:Publish",
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Ref": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopic5AAAFBD6"
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyB1D0D2EB",
                                    "roles": [
                                      {
                                        "Ref": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookRoleD8E90611"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Topic": {
                        "id": "Topic",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Topic",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::SNS::Topic",
                              "aws:cdk:cloudformation:props": {
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "ecs/webServiceCluster/microServiceAutoScalingGroup"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/webServiceCluster/microServiceAutoScalingGroup/LifecycleHookDrainHook/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::AutoScaling::LifecycleHook",
                          "aws:cdk:cloudformation:props": {
                            "autoScalingGroupName": {
                              "Ref": "webServiceClustermicroServiceAutoScalingGroupASG0EF2B4FE"
                            },
                            "lifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                            "defaultResult": "CONTINUE",
                            "heartbeatTimeout": 300,
                            "notificationTargetArn": {
                              "Ref": "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookTopic5AAAFBD6"
                            },
                            "roleArn": {
                              "Fn::GetAtt": [
                                "webServiceClustermicroServiceAutoScalingGroupLifecycleHookDrainHookRoleD8E90611",
                                "Arn"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": {
            "id": "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "path": "ecs/SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter"
          },
          "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118": {
            "id": "SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "path": "ecs/SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118"
          },
          "ASG": {
            "id": "ASG",
            "path": "ecs/ASG",
            "children": {
              "InstanceSecurityGroup": {
                "id": "InstanceSecurityGroup",
                "path": "ecs/ASG/InstanceSecurityGroup",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ecs/ASG/InstanceSecurityGroup/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                      "aws:cdk:cloudformation:props": {
                        "groupDescription": "ecs/ASG/InstanceSecurityGroup",
                        "securityGroupEgress": [
                          {
                            "cidrIp": "0.0.0.0/0",
                            "description": "Allow all outbound traffic by default",
                            "ipProtocol": "-1"
                          }
                        ],
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ecs/ASG"
                          }
                        ],
                        "vpcId": {
                          "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                        }
                      }
                    }
                  }
                }
              },
              "InstanceRole": {
                "id": "InstanceRole",
                "path": "ecs/ASG/InstanceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ecs/ASG/InstanceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "ec2.",
                                      {
                                        "Ref": "AWS::URLSuffix"
                                      }
                                    ]
                                  ]
                                }
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "ecs/ASG"
                          }
                        ]
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "ecs/ASG/InstanceRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/ASG/InstanceRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "ecs:CreateCluster",
                                    "ecs:DeregisterContainerInstance",
                                    "ecs:DiscoverPollEndpoint",
                                    "ecs:Poll",
                                    "ecs:RegisterContainerInstance",
                                    "ecs:StartTelemetrySession",
                                    "ecs:Submit*",
                                    "ecr:GetAuthorizationToken",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "ASGInstanceRoleDefaultPolicy7636D8BF",
                            "roles": [
                              {
                                "Ref": "ASGInstanceRoleE263A41B"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "InstanceProfile": {
                "id": "InstanceProfile",
                "path": "ecs/ASG/InstanceProfile",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                  "aws:cdk:cloudformation:props": {
                    "roles": [
                      {
                        "Ref": "ASGInstanceRoleE263A41B"
                      }
                    ]
                  }
                }
              },
              "LaunchConfig": {
                "id": "LaunchConfig",
                "path": "ecs/ASG/LaunchConfig",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AutoScaling::LaunchConfiguration",
                  "aws:cdk:cloudformation:props": {
                    "imageId": {
                      "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
                    },
                    "instanceType": "t2.micro",
                    "iamInstanceProfile": {
                      "Ref": "ASGInstanceProfile0A2834D7"
                    },
                    "securityGroups": [
                      {
                        "Fn::GetAtt": [
                          "ASGInstanceSecurityGroup0525485D",
                          "GroupId"
                        ]
                      }
                    ],
                    "userData": {
                      "Fn::Base64": {
                        "Fn::Join": [
                          "",
                          [
                            "#!/bin/bash\necho ECS_CLUSTER=",
                            {
                              "Ref": "webServiceCluster5D072757"
                            },
                            " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
                          ]
                        ]
                      }
                    }
                  }
                }
              },
              "ASG": {
                "id": "ASG",
                "path": "ecs/ASG/ASG",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::AutoScaling::AutoScalingGroup",
                  "aws:cdk:cloudformation:props": {
                    "maxSize": "1",
                    "minSize": "1",
                    "desiredCapacity": "1",
                    "launchConfigurationName": {
                      "Ref": "ASGLaunchConfigC00AF12B"
                    },
                    "tags": [
                      {
                        "key": "Name",
                        "value": "ecs/ASG",
                        "propagateAtLaunch": true
                      }
                    ],
                    "vpcZoneIdentifier": [
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet1Subnet712E02178AFD203D"
                      },
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet2SubnetAA0D521D667E9B43"
                      }
                    ]
                  }
                }
              },
              "DrainECSHook": {
                "id": "DrainECSHook",
                "path": "ecs/ASG/DrainECSHook",
                "children": {
                  "Function": {
                    "id": "Function",
                    "path": "ecs/ASG/DrainECSHook/Function",
                    "children": {
                      "ServiceRole": {
                        "id": "ServiceRole",
                        "path": "ecs/ASG/DrainECSHook/Function/ServiceRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/ASG/DrainECSHook/Function/ServiceRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "Service": "lambda.amazonaws.com"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "managedPolicyArns": [
                                  {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                      ]
                                    ]
                                  }
                                ],
                                "tags": [
                                  {
                                    "key": "Name",
                                    "value": "ecs/ASG"
                                  }
                                ]
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "ecs/ASG/DrainECSHook/Function/ServiceRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "ecs/ASG/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "ec2:DescribeInstances",
                                            "ec2:DescribeInstanceAttribute",
                                            "ec2:DescribeInstanceStatus",
                                            "ec2:DescribeHosts"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": "*"
                                        },
                                        {
                                          "Action": "autoscaling:CompleteLifecycleAction",
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::Join": [
                                              "",
                                              [
                                                "arn:",
                                                {
                                                  "Ref": "AWS::Partition"
                                                },
                                                ":autoscaling:",
                                                {
                                                  "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                  "Ref": "AWS::AccountId"
                                                },
                                                ":autoScalingGroup:*:autoScalingGroupName/",
                                                {
                                                  "Ref": "ASG46ED3070"
                                                }
                                              ]
                                            ]
                                          }
                                        },
                                        {
                                          "Action": [
                                            "ecs:DescribeContainerInstances",
                                            "ecs:DescribeTasks"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": "*"
                                        },
                                        {
                                          "Action": [
                                            "ecs:ListContainerInstances",
                                            "ecs:SubmitContainerStateChange",
                                            "ecs:SubmitTaskStateChange"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::GetAtt": [
                                              "webServiceCluster5D072757",
                                              "Arn"
                                            ]
                                          }
                                        },
                                        {
                                          "Action": [
                                            "ecs:UpdateContainerInstancesState",
                                            "ecs:ListTasks"
                                          ],
                                          "Condition": {
                                            "ArnEquals": {
                                              "ecs:cluster": {
                                                "Fn::GetAtt": [
                                                  "webServiceCluster5D072757",
                                                  "Arn"
                                                ]
                                              }
                                            }
                                          },
                                          "Effect": "Allow",
                                          "Resource": "*"
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "ASGDrainECSHookFunctionServiceRoleDefaultPolicy16848A27",
                                    "roles": [
                                      {
                                        "Ref": "ASGDrainECSHookFunctionServiceRoleC12963BB"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/ASG/DrainECSHook/Function/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                          "aws:cdk:cloudformation:props": {
                            "code": {
                              "zipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  while has_tasks(cluster, instance_arn):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\n\ndef has_tasks(cluster, instance_arn):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']\n  print('Instance %s has %s tasks' % (instance_arn, tasks))\n\n  return tasks > 0\n\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
                            },
                            "handler": "index.lambda_handler",
                            "role": {
                              "Fn::GetAtt": [
                                "ASGDrainECSHookFunctionServiceRoleC12963BB",
                                "Arn"
                              ]
                            },
                            "runtime": "python3.6",
                            "environment": {
                              "variables": {
                                "CLUSTER": {
                                  "Ref": "webServiceCluster5D072757"
                                }
                              }
                            },
                            "tags": [
                              {
                                "key": "Name",
                                "value": "ecs/ASG"
                              }
                            ],
                            "timeout": 310
                          }
                        }
                      },
                      "AllowInvoke:ecsASGLifecycleHookDrainHookTopic71143AC1": {
                        "id": "AllowInvoke:ecsASGLifecycleHookDrainHookTopic71143AC1",
                        "path": "ecs/ASG/DrainECSHook/Function/AllowInvoke:ecsASGLifecycleHookDrainHookTopic71143AC1",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                          "aws:cdk:cloudformation:props": {
                            "action": "lambda:InvokeFunction",
                            "functionName": {
                              "Fn::GetAtt": [
                                "ASGDrainECSHookFunction5F24CF4D",
                                "Arn"
                              ]
                            },
                            "principal": "sns.amazonaws.com",
                            "sourceArn": {
                              "Ref": "ASGLifecycleHookDrainHookTopicA8AD4ACB"
                            }
                          }
                        }
                      },
                      "Topic": {
                        "id": "Topic",
                        "path": "ecs/ASG/DrainECSHook/Function/Topic",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/ASG/DrainECSHook/Function/Topic/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::SNS::Subscription",
                              "aws:cdk:cloudformation:props": {
                                "protocol": "lambda",
                                "topicArn": {
                                  "Ref": "ASGLifecycleHookDrainHookTopicA8AD4ACB"
                                },
                                "endpoint": {
                                  "Fn::GetAtt": [
                                    "ASGDrainECSHookFunction5F24CF4D",
                                    "Arn"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "LifecycleHookDrainHook": {
                "id": "LifecycleHookDrainHook",
                "path": "ecs/ASG/LifecycleHookDrainHook",
                "children": {
                  "Role": {
                    "id": "Role",
                    "path": "ecs/ASG/LifecycleHookDrainHook/Role",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/ASG/LifecycleHookDrainHook/Role/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "autoscaling.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "tags": [
                              {
                                "key": "Name",
                                "value": "ecs/ASG"
                              }
                            ]
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "ecs/ASG/LifecycleHookDrainHook/Role/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "ecs/ASG/LifecycleHookDrainHook/Role/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sns:Publish",
                                      "Effect": "Allow",
                                      "Resource": {
                                        "Ref": "ASGLifecycleHookDrainHookTopicA8AD4ACB"
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "ASGLifecycleHookDrainHookRoleDefaultPolicy3EEFDE57",
                                "roles": [
                                  {
                                    "Ref": "ASGLifecycleHookDrainHookRoleD640316C"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Topic": {
                    "id": "Topic",
                    "path": "ecs/ASG/LifecycleHookDrainHook/Topic",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "ecs/ASG/LifecycleHookDrainHook/Topic/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::SNS::Topic",
                          "aws:cdk:cloudformation:props": {
                            "tags": [
                              {
                                "key": "Name",
                                "value": "ecs/ASG"
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "ecs/ASG/LifecycleHookDrainHook/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::AutoScaling::LifecycleHook",
                      "aws:cdk:cloudformation:props": {
                        "autoScalingGroupName": {
                          "Ref": "ASG46ED3070"
                        },
                        "lifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                        "defaultResult": "CONTINUE",
                        "heartbeatTimeout": 300,
                        "notificationTargetArn": {
                          "Ref": "ASGLifecycleHookDrainHookTopicA8AD4ACB"
                        },
                        "roleArn": {
                          "Fn::GetAtt": [
                            "ASGLifecycleHookDrainHookRoleD640316C",
                            "Arn"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "TaskDef": {
            "id": "TaskDef",
            "path": "ecs/TaskDef",
            "children": {
              "TaskRole": {
                "id": "TaskRole",
                "path": "ecs/TaskDef/TaskRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "ecs/TaskDef/TaskRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "ecs/TaskDef/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::TaskDefinition",
                  "aws:cdk:cloudformation:props": {
                    "containerDefinitions": [
                      {
                        "essential": true,
                        "image": "amazon/amazon-ecs-sample",
                        "memory": 512,
                        "name": "DefaultContainer"
                      }
                    ],
                    "family": "ecsTaskDef09136995",
                    "networkMode": "bridge",
                    "requiresCompatibilities": [
                      "EC2"
                    ],
                    "taskRoleArn": {
                      "Fn::GetAtt": [
                        "TaskDefTaskRole1EDB4A67",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "DefaultContainer": {
                "id": "DefaultContainer",
                "path": "ecs/TaskDef/DefaultContainer"
              }
            }
          },
          "Service": {
            "id": "Service",
            "path": "ecs/Service",
            "children": {
              "Service": {
                "id": "Service",
                "path": "ecs/Service/Service",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ECS::Service",
                  "aws:cdk:cloudformation:props": {
                    "cluster": {
                      "Ref": "webServiceCluster5D072757"
                    },
                    "deploymentConfiguration": {
                      "maximumPercent": 200,
                      "minimumHealthyPercent": 50
                    },
                    "desiredCount": 1,
                    "enableEcsManagedTags": false,
                    "launchType": "EC2",
                    "schedulingStrategy": "REPLICA",
                    "taskDefinition": {
                      "Ref": "TaskDef54694570"
                    }
                  }
                }
              }
            }
          },
          "ImportedALB": {
            "id": "ImportedALB",
            "path": "ecs/ImportedALB",
            "children": {
              "SecurityGroup": {
                "id": "SecurityGroup",
                "path": "ecs/ImportedALB/SecurityGroup"
              }
            }
          },
          "ImportedListener": {
            "id": "ImportedListener",
            "path": "ecs/ImportedListener"
          },
          "SecurityGroup": {
            "id": "SecurityGroup",
            "path": "ecs/SecurityGroup"
          },
          "ecs-service1": {
            "id": "ecs-service1",
            "path": "ecs/ecs-service1",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "ecs/ecs-service1/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                  "aws:cdk:cloudformation:props": {
                    "port": 80,
                    "protocol": "HTTP",
                    "vpcId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "bastion": {
        "id": "bastion",
        "path": "bastion",
        "children": {
          "bastion-host": {
            "id": "bastion-host",
            "path": "bastion/bastion-host",
            "children": {
              "InstanceRole": {
                "id": "InstanceRole",
                "path": "bastion/bastion-host/InstanceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "bastion/bastion-host/InstanceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "ec2.",
                                      {
                                        "Ref": "AWS::URLSuffix"
                                      }
                                    ]
                                  ]
                                }
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "tags": [
                          {
                            "key": "Name",
                            "value": "bastion/bastion-host"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "InstanceProfile": {
                "id": "InstanceProfile",
                "path": "bastion/bastion-host/InstanceProfile",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::InstanceProfile",
                  "aws:cdk:cloudformation:props": {
                    "roles": [
                      {
                        "Ref": "bastionhostInstanceRoleB60F07DA"
                      }
                    ]
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "bastion/bastion-host/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::EC2::Instance",
                  "aws:cdk:cloudformation:props": {
                    "availabilityZone": {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::GetAZs": ""
                        }
                      ]
                    },
                    "iamInstanceProfile": {
                      "Ref": "bastionhostInstanceProfile87EC3056"
                    },
                    "imageId": {
                      "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
                    },
                    "instanceType": "t2.micro",
                    "keyName": "devops",
                    "securityGroupIds": [
                      {
                        "Fn::ImportValue": "security-stack:ExportsOutputFnGetAttbastionsg1FA4DDAFGroupId8A31197D"
                      }
                    ],
                    "subnetId": {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPublicSubnet1Subnet2E5540ABA39DCC67"
                    },
                    "tags": [
                      {
                        "key": "Name",
                        "value": "bastion/bastion-host"
                      }
                    ],
                    "userData": {
                      "Fn::Base64": "#!/bin/bash"
                    }
                  }
                }
              }
            }
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter",
            "path": "bastion/SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter"
          },
          "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118": {
            "id": "SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118",
            "path": "bastion/SsmParameterValue:--aws--service--ami-amazon-linux-latest--amzn2-ami-hvm-x86_64-gp2:C96584B6-F00A-464E-AD19-53AFF4B05118"
          }
        }
      },
      "kms": {
        "id": "kms",
        "path": "kms",
        "children": {
          "rdskey": {
            "id": "rdskey",
            "path": "kms/rdskey",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "kms/rdskey/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::KMS::Key",
                  "aws:cdk:cloudformation:props": {
                    "keyPolicy": {
                      "Statement": [
                        {
                          "Action": [
                            "kms:Create*",
                            "kms:Describe*",
                            "kms:Enable*",
                            "kms:List*",
                            "kms:Put*",
                            "kms:Update*",
                            "kms:Revoke*",
                            "kms:Disable*",
                            "kms:Get*",
                            "kms:Delete*",
                            "kms:ScheduleKeyDeletion",
                            "kms:CancelKeyDeletion",
                            "kms:GenerateDataKey",
                            "kms:TagResource",
                            "kms:UntagResource"
                          ],
                          "Effect": "Allow",
                          "Principal": {
                            "AWS": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":iam::",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":root"
                                ]
                              ]
                            }
                          },
                          "Resource": "*"
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "description": "serverless-key-rds",
                    "enableKeyRotation": true
                  }
                }
              },
              "Alias": {
                "id": "Alias",
                "path": "kms/rdskey/Alias",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "kms/rdskey/Alias/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::KMS::Alias",
                      "aws:cdk:cloudformation:props": {
                        "aliasName": "alias/serverless-key-rds",
                        "targetKeyId": {
                          "Fn::GetAtt": [
                            "rdskey077EA73A",
                            "Arn"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rdskey-param": {
            "id": "rdskey-param",
            "path": "kms/rdskey-param",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "kms/rdskey-param/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "rdskey077EA73A"
                    },
                    "name": "/dev/rds-kms-key"
                  }
                }
              }
            }
          }
        }
      },
      "s3buckets": {
        "id": "s3buckets",
        "path": "s3buckets",
        "children": {
          "lambda-bucket": {
            "id": "lambda-bucket",
            "path": "s3buckets/lambda-bucket",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "s3buckets/lambda-bucket/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "accessControl": "BucketOwnerFullControl",
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "AES256"
                          }
                        }
                      ]
                    },
                    "bucketName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "-dev-lambda-deploy-packages"
                        ]
                      ]
                    },
                    "publicAccessBlockConfiguration": {
                      "blockPublicAcls": true,
                      "blockPublicPolicy": true,
                      "ignorePublicAcls": true,
                      "restrictPublicBuckets": true
                    }
                  }
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "s3buckets/lambda-bucket/Notifications"
              }
            }
          },
          "ssm-lambda-bucket": {
            "id": "ssm-lambda-bucket",
            "path": "s3buckets/ssm-lambda-bucket",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "s3buckets/ssm-lambda-bucket/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "lambdabucket58768DEB"
                    },
                    "name": "/dev/lambda-s3-bucket"
                  }
                }
              }
            }
          },
          "build-artifacts": {
            "id": "build-artifacts",
            "path": "s3buckets/build-artifacts",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "s3buckets/build-artifacts/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "accessControl": "BucketOwnerFullControl",
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "AES256"
                          }
                        }
                      ]
                    },
                    "bucketName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "-dev-build-artifacts"
                        ]
                      ]
                    },
                    "publicAccessBlockConfiguration": {
                      "blockPublicAcls": true,
                      "blockPublicPolicy": true,
                      "ignorePublicAcls": true,
                      "restrictPublicBuckets": true
                    }
                  }
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "s3buckets/build-artifacts/Notifications"
              }
            }
          },
          "s3-build-artifacts-export": {
            "id": "s3-build-artifacts-export",
            "path": "s3buckets/s3-build-artifacts-export"
          },
          "frontend": {
            "id": "frontend",
            "path": "s3buckets/frontend",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "s3buckets/frontend/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "accessControl": "BucketOwnerFullControl",
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "AES256"
                          }
                        }
                      ]
                    },
                    "bucketName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "-dev-frontend"
                        ]
                      ]
                    },
                    "publicAccessBlockConfiguration": {
                      "blockPublicAcls": true,
                      "blockPublicPolicy": true,
                      "ignorePublicAcls": true,
                      "restrictPublicBuckets": true
                    }
                  }
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "s3buckets/frontend/Notifications"
              }
            }
          },
          "s3-frontend-export": {
            "id": "s3-frontend-export",
            "path": "s3buckets/s3-frontend-export"
          },
          "cloudtrail": {
            "id": "cloudtrail",
            "path": "s3buckets/cloudtrail",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "s3buckets/cloudtrail/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "accessControl": "BucketOwnerFullControl",
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "AES256"
                          }
                        }
                      ]
                    },
                    "bucketName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "-dev-cloudtrail"
                        ]
                      ]
                    },
                    "publicAccessBlockConfiguration": {
                      "blockPublicAcls": true,
                      "blockPublicPolicy": true,
                      "ignorePublicAcls": true,
                      "restrictPublicBuckets": true
                    }
                  }
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "s3buckets/cloudtrail/Notifications"
              },
              "Policy": {
                "id": "Policy",
                "path": "s3buckets/cloudtrail/Policy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "s3buckets/cloudtrail/Policy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::S3::BucketPolicy",
                      "aws:cdk:cloudformation:props": {
                        "bucket": {
                          "Ref": "cloudtrail82DEEC25"
                        },
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": "s3:GetBucketAcl",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "cloudtrail.amazonaws.com"
                              },
                              "Resource": {
                                "Fn::GetAtt": [
                                  "cloudtrail82DEEC25",
                                  "Arn"
                                ]
                              }
                            },
                            {
                              "Action": "s3:PutObject",
                              "Condition": {
                                "StringEquals": {
                                  "s3:x-amz-acl": "bucket-owner-full-control"
                                }
                              },
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "cloudtrail.amazonaws.com"
                              },
                              "Resource": {
                                "Fn::Join": [
                                  "",
                                  [
                                    {
                                      "Fn::GetAtt": [
                                        "cloudtrail82DEEC25",
                                        "Arn"
                                      ]
                                    },
                                    "/AWSLogs/",
                                    {
                                      "Ref": "AWS::AccountId"
                                    },
                                    "/*"
                                  ]
                                ]
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "s3buckets/Exports",
            "children": {
              "Output{\"Ref\":\"cloudtrail82DEEC25\"}": {
                "id": "Output{\"Ref\":\"cloudtrail82DEEC25\"}",
                "path": "s3buckets/Exports/Output{\"Ref\":\"cloudtrail82DEEC25\"}"
              }
            }
          }
        }
      },
      "rds": {
        "id": "rds",
        "path": "rds",
        "children": {
          "db-secret": {
            "id": "db-secret",
            "path": "rds/db-secret",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "rds/db-secret/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SecretsManager::Secret",
                  "aws:cdk:cloudformation:props": {
                    "generateSecretString": {
                      "excludePunctuation": true,
                      "generateStringKey": "password",
                      "includeSpace": false,
                      "passwordLength": 12,
                      "secretStringTemplate": "{\"username\": \"admin\"}"
                    },
                    "name": "dev/rds-secret"
                  }
                }
              }
            }
          },
          "pg-dev": {
            "id": "pg-dev",
            "path": "rds/pg-dev"
          },
          "mysql": {
            "id": "mysql",
            "path": "rds/mysql",
            "children": {
              "Subnets": {
                "id": "Subnets",
                "path": "rds/mysql/Subnets",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::RDS::DBSubnetGroup",
                  "aws:cdk:cloudformation:props": {
                    "dbSubnetGroupDescription": "Subnets for mysql database",
                    "subnetIds": [
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCIsolatedSubnet1Subnet1A2735F39EC62CD1"
                      },
                      {
                        "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCIsolatedSubnet2SubnetD2338F17278A6A7F"
                      }
                    ]
                  }
                }
              },
              "SecurityGroup": {
                "id": "SecurityGroup",
                "path": "rds/mysql/SecurityGroup",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "rds/mysql/SecurityGroup/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroup",
                      "aws:cdk:cloudformation:props": {
                        "groupDescription": "RDS security group",
                        "securityGroupEgress": [
                          {
                            "cidrIp": "0.0.0.0/0",
                            "description": "Allow all outbound traffic by default",
                            "ipProtocol": "-1"
                          }
                        ],
                        "vpcId": {
                          "Fn::ImportValue": "vpc:ExportsOutputRefdevVPC524BF54C27F5E3C9"
                        }
                      }
                    }
                  },
                  "from securitystacklambdasgF241D9AE:{IndirectPort}": {
                    "id": "from securitystacklambdasgF241D9AE:{IndirectPort}",
                    "path": "rds/mysql/SecurityGroup/from securitystacklambdasgF241D9AE:{IndirectPort}",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                      "aws:cdk:cloudformation:props": {
                        "ipProtocol": "tcp",
                        "description": "Access from Lambda functions",
                        "fromPort": {
                          "Fn::GetAtt": [
                            "mysql5168B53F",
                            "Endpoint.Port"
                          ]
                        },
                        "groupId": {
                          "Fn::GetAtt": [
                            "mysqlSecurityGroup65A9C338",
                            "GroupId"
                          ]
                        },
                        "sourceSecurityGroupId": {
                          "Fn::ImportValue": "security-stack:ExportsOutputFnGetAttlambdasg77597EA8GroupIdF08ADB40"
                        },
                        "toPort": {
                          "Fn::GetAtt": [
                            "mysql5168B53F",
                            "Endpoint.Port"
                          ]
                        }
                      }
                    }
                  },
                  "from securitystackbastionsg905E81FD:{IndirectPort}": {
                    "id": "from securitystackbastionsg905E81FD:{IndirectPort}",
                    "path": "rds/mysql/SecurityGroup/from securitystackbastionsg905E81FD:{IndirectPort}",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::EC2::SecurityGroupIngress",
                      "aws:cdk:cloudformation:props": {
                        "ipProtocol": "tcp",
                        "description": "Allow from bastion host",
                        "fromPort": {
                          "Fn::GetAtt": [
                            "mysql5168B53F",
                            "Endpoint.Port"
                          ]
                        },
                        "groupId": {
                          "Fn::GetAtt": [
                            "mysqlSecurityGroup65A9C338",
                            "GroupId"
                          ]
                        },
                        "sourceSecurityGroupId": {
                          "Fn::ImportValue": "security-stack:ExportsOutputFnGetAttbastionsg1FA4DDAFGroupId8A31197D"
                        },
                        "toPort": {
                          "Fn::GetAtt": [
                            "mysql5168B53F",
                            "Endpoint.Port"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "rds/mysql/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::RDS::DBCluster",
                  "aws:cdk:cloudformation:props": {
                    "engine": "aurora-mysql",
                    "databaseName": "serverlessdev",
                    "dbClusterParameterGroupName": "default.aurora-mysql5.7",
                    "dbSubnetGroupName": {
                      "Ref": "mysqlSubnets8BA5C110"
                    },
                    "engineVersion": "5.7.12",
                    "masterUsername": "admin",
                    "masterUserPassword": {
                      "Fn::Join": [
                        "",
                        [
                          "{{resolve:secretsmanager:",
                          {
                            "Ref": "dbsecretF8F18970"
                          },
                          ":SecretString:password::}}"
                        ]
                      ]
                    },
                    "vpcSecurityGroupIds": [
                      {
                        "Fn::GetAtt": [
                          "mysqlSecurityGroup65A9C338",
                          "GroupId"
                        ]
                      }
                    ]
                  }
                }
              },
              "Instance1": {
                "id": "Instance1",
                "path": "rds/mysql/Instance1",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::RDS::DBInstance",
                  "aws:cdk:cloudformation:props": {
                    "dbInstanceClass": "db.t3.small",
                    "dbClusterIdentifier": {
                      "Ref": "mysql5168B53F"
                    },
                    "dbSubnetGroupName": {
                      "Ref": "mysqlSubnets8BA5C110"
                    },
                    "engine": "aurora-mysql",
                    "engineVersion": "5.7.12",
                    "publiclyAccessible": false
                  }
                }
              }
            }
          },
          "db-host": {
            "id": "db-host",
            "path": "rds/db-host",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "rds/db-host/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "mysql5168B53F",
                        "Endpoint.Address"
                      ]
                    },
                    "name": "/dev/db-host"
                  }
                }
              }
            }
          },
          "db-name": {
            "id": "db-name",
            "path": "rds/db-name",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "rds/db-name/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": "serverlessdev",
                    "name": "/dev/db-name"
                  }
                }
              }
            }
          }
        }
      },
      "redis": {
        "id": "redis",
        "path": "redis",
        "children": {
          "redis-subnet-group": {
            "id": "redis-subnet-group",
            "path": "redis/redis-subnet-group",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::ElastiCache::SubnetGroup",
              "aws:cdk:cloudformation:props": {
                "description": "subnet group for redis",
                "subnetIds": [
                  {
                    "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet1Subnet712E02178AFD203D"
                  },
                  {
                    "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet2SubnetAA0D521D667E9B43"
                  }
                ]
              }
            }
          },
          "redis": {
            "id": "redis",
            "path": "redis/redis",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::ElastiCache::CacheCluster",
              "aws:cdk:cloudformation:props": {
                "cacheNodeType": "cache.t2.small",
                "engine": "redis",
                "numCacheNodes": 1,
                "autoMinorVersionUpgrade": true,
                "cacheSubnetGroupName": {
                  "Ref": "redissubnetgroup"
                },
                "clusterName": "serverless-redis-dev",
                "vpcSecurityGroupIds": [
                  {
                    "Fn::ImportValue": "redis-sg-export"
                  }
                ]
              }
            }
          },
          "redis-endpoint": {
            "id": "redis-endpoint",
            "path": "redis/redis-endpoint",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "redis/redis-endpoint/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "redis",
                        "RedisEndpoint.Address"
                      ]
                    },
                    "name": "/dev/redis-endpoint"
                  }
                }
              }
            }
          },
          "redis-port": {
            "id": "redis-port",
            "path": "redis/redis-port",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "redis/redis-port/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "redis",
                        "RedisEndpoint.Port"
                      ]
                    },
                    "name": "/dev/redis-port"
                  }
                }
              }
            }
          }
        }
      },
      "cognito": {
        "id": "cognito",
        "path": "cognito",
        "children": {
          "cognitouserpool": {
            "id": "cognitouserpool",
            "path": "cognito/cognitouserpool",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::Cognito::UserPool",
              "aws:cdk:cloudformation:props": {
                "autoVerifiedAttributes": [
                  "email"
                ],
                "policies": {
                  "passwordPolicy": {
                    "minimumLength": 10,
                    "requireLowercase": true,
                    "requireNumbers": true,
                    "requireSymbols": false,
                    "requireUppercase": true
                  }
                },
                "schema": [
                  {
                    "attributeDataType": "String",
                    "name": "param1",
                    "mutable": true
                  }
                ],
                "usernameAttributes": [
                  "email",
                  "phone_number"
                ],
                "userPoolName": "serverless-user-pool"
              }
            }
          },
          "pool-client": {
            "id": "pool-client",
            "path": "cognito/pool-client",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::Cognito::UserPoolClient",
              "aws:cdk:cloudformation:props": {
                "userPoolId": {
                  "Ref": "cognitouserpool"
                },
                "clientName": "dev-app-client"
              }
            }
          },
          "identitypool": {
            "id": "identitypool",
            "path": "cognito/identitypool",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::Cognito::IdentityPool",
              "aws:cdk:cloudformation:props": {
                "allowUnauthenticatedIdentities": false,
                "cognitoIdentityProviders": [
                  {
                    "clientId": {
                      "Ref": "poolclient"
                    },
                    "providerName": {
                      "Fn::GetAtt": [
                        "cognitouserpool",
                        "ProviderName"
                      ]
                    }
                  }
                ],
                "identityPoolName": "serverless-identity-pool"
              }
            }
          },
          "app-id": {
            "id": "app-id",
            "path": "cognito/app-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cognito/app-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "poolclient"
                    },
                    "name": "/dev/cognito-app-client-id"
                  }
                }
              }
            }
          },
          "user-pool-id": {
            "id": "user-pool-id",
            "path": "cognito/user-pool-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cognito/user-pool-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "cognitouserpool"
                    },
                    "name": "/dev/cognito-user-pool-id"
                  }
                }
              }
            }
          },
          "identity-pool-id": {
            "id": "identity-pool-id",
            "path": "cognito/identity-pool-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cognito/identity-pool-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "identitypool"
                    },
                    "name": "/dev/cognito-identity-pool-id"
                  }
                }
              }
            }
          }
        }
      },
      "apigw": {
        "id": "apigw",
        "path": "apigw",
        "children": {
          "restapi": {
            "id": "restapi",
            "path": "apigw/restapi",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "apigw/restapi/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ApiGateway::RestApi",
                  "aws:cdk:cloudformation:props": {
                    "endpointConfiguration": {
                      "types": [
                        "REGIONAL"
                      ]
                    },
                    "name": "serverless-service"
                  }
                }
              },
              "CloudWatchRole": {
                "id": "CloudWatchRole",
                "path": "apigw/restapi/CloudWatchRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "apigw/restapi/CloudWatchRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "apigateway.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Account": {
                "id": "Account",
                "path": "apigw/restapi/Account",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ApiGateway::Account",
                  "aws:cdk:cloudformation:props": {
                    "cloudWatchRoleArn": {
                      "Fn::GetAtt": [
                        "restapiCloudWatchRole9B4F6A99",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "Deployment": {
                "id": "Deployment",
                "path": "apigw/restapi/Deployment",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "apigw/restapi/Deployment/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ApiGateway::Deployment",
                      "aws:cdk:cloudformation:props": {
                        "restApiId": {
                          "Ref": "restapiC5611D27"
                        },
                        "description": "Automatically created by the RestApi construct"
                      }
                    }
                  }
                }
              },
              "DeploymentStage.prod": {
                "id": "DeploymentStage.prod",
                "path": "apigw/restapi/DeploymentStage.prod",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "apigw/restapi/DeploymentStage.prod/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ApiGateway::Stage",
                      "aws:cdk:cloudformation:props": {
                        "restApiId": {
                          "Ref": "restapiC5611D27"
                        },
                        "deploymentId": {
                          "Ref": "restapiDeployment4A8950A2bbc8335e9cbaa11719e10512355e14d0"
                        },
                        "stageName": "prod"
                      }
                    }
                  }
                }
              },
              "Endpoint": {
                "id": "Endpoint",
                "path": "apigw/restapi/Endpoint"
              },
              "Default": {
                "id": "Default",
                "path": "apigw/restapi/Default",
                "children": {
                  "ANY": {
                    "id": "ANY",
                    "path": "apigw/restapi/Default/ANY",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "apigw/restapi/Default/ANY/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::ApiGateway::Method",
                          "aws:cdk:cloudformation:props": {
                            "httpMethod": "ANY",
                            "resourceId": {
                              "Fn::GetAtt": [
                                "restapiC5611D27",
                                "RootResourceId"
                              ]
                            },
                            "restApiId": {
                              "Ref": "restapiC5611D27"
                            },
                            "authorizationType": "NONE",
                            "integration": {
                              "type": "MOCK"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "api-gw": {
            "id": "api-gw",
            "path": "apigw/api-gw",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "apigw/api-gw/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "restapiC5611D27"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".amazonaws.com/"
                        ]
                      ]
                    },
                    "name": "/dev/api-gw-url"
                  }
                }
              }
            }
          },
          "api-gw-id": {
            "id": "api-gw-id",
            "path": "apigw/api-gw-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "apigw/api-gw-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "restapiC5611D27"
                    },
                    "name": "/devapi-gw-id"
                  }
                }
              }
            }
          }
        }
      },
      "lambda": {
        "id": "lambda",
        "path": "lambda",
        "children": {
          "helloworldfunction": {
            "id": "helloworldfunction",
            "path": "lambda/helloworldfunction",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "lambda/helloworldfunction/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "lambda/helloworldfunction/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Code": {
                "id": "Code",
                "path": "lambda/helloworldfunction/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "lambda/helloworldfunction/Code/Stage"
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "lambda/helloworldfunction/Code/AssetBucket"
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "lambda/helloworldfunction/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3Bucket82FD63F1"
                      },
                      "s3Key": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Select": [
                                0,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3VersionKey9E8DC775"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Fn::Select": [
                                1,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3VersionKey9E8DC775"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    },
                    "handler": "hello.handler",
                    "role": {
                      "Fn::GetAtt": [
                        "helloworldfunctionServiceRole5DEDEC13",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.8"
                  }
                }
              }
            }
          },
          "AssetParameters": {
            "id": "AssetParameters",
            "path": "lambda/AssetParameters",
            "children": {
              "54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3": {
                "id": "54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3",
                "path": "lambda/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "lambda/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "lambda/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "lambda/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/ArtifactHash"
                  }
                }
              }
            }
          },
          "helloworld": {
            "id": "helloworld",
            "path": "lambda/helloworld",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "lambda/helloworld/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ApiGateway::RestApi",
                  "aws:cdk:cloudformation:props": {
                    "name": "mylambdaapi"
                  }
                }
              },
              "CloudWatchRole": {
                "id": "CloudWatchRole",
                "path": "lambda/helloworld/CloudWatchRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "lambda/helloworld/CloudWatchRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "apigateway.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Account": {
                "id": "Account",
                "path": "lambda/helloworld/Account",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::ApiGateway::Account",
                  "aws:cdk:cloudformation:props": {
                    "cloudWatchRoleArn": {
                      "Fn::GetAtt": [
                        "helloworldCloudWatchRole08F7639F",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "Deployment": {
                "id": "Deployment",
                "path": "lambda/helloworld/Deployment",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "lambda/helloworld/Deployment/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ApiGateway::Deployment",
                      "aws:cdk:cloudformation:props": {
                        "restApiId": {
                          "Ref": "helloworldB7C45939"
                        },
                        "description": "Automatically created by the RestApi construct"
                      }
                    }
                  }
                }
              },
              "DeploymentStage.prod": {
                "id": "DeploymentStage.prod",
                "path": "lambda/helloworld/DeploymentStage.prod",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "lambda/helloworld/DeploymentStage.prod/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::ApiGateway::Stage",
                      "aws:cdk:cloudformation:props": {
                        "restApiId": {
                          "Ref": "helloworldB7C45939"
                        },
                        "deploymentId": {
                          "Ref": "helloworldDeployment39B31E9697cb945caa2d8c6b5ff8070a67624447"
                        },
                        "stageName": "prod"
                      }
                    }
                  }
                }
              },
              "Endpoint": {
                "id": "Endpoint",
                "path": "lambda/helloworld/Endpoint"
              },
              "Default": {
                "id": "Default",
                "path": "lambda/helloworld/Default",
                "children": {
                  "{proxy+}": {
                    "id": "{proxy+}",
                    "path": "lambda/helloworld/Default/{proxy+}",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "lambda/helloworld/Default/{proxy+}/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::ApiGateway::Resource",
                          "aws:cdk:cloudformation:props": {
                            "parentId": {
                              "Fn::GetAtt": [
                                "helloworldB7C45939",
                                "RootResourceId"
                              ]
                            },
                            "pathPart": "{proxy+}",
                            "restApiId": {
                              "Ref": "helloworldB7C45939"
                            }
                          }
                        }
                      },
                      "ANY": {
                        "id": "ANY",
                        "path": "lambda/helloworld/Default/{proxy+}/ANY",
                        "children": {
                          "ApiPermission.lambdahelloworldFF59B2B1.ANY..{proxy+}": {
                            "id": "ApiPermission.lambdahelloworldFF59B2B1.ANY..{proxy+}",
                            "path": "lambda/helloworld/Default/{proxy+}/ANY/ApiPermission.lambdahelloworldFF59B2B1.ANY..{proxy+}",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                              "aws:cdk:cloudformation:props": {
                                "action": "lambda:InvokeFunction",
                                "functionName": {
                                  "Fn::GetAtt": [
                                    "helloworldfunctionBF65BD73",
                                    "Arn"
                                  ]
                                },
                                "principal": "apigateway.amazonaws.com",
                                "sourceArn": {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "arn:",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      ":execute-api:",
                                      {
                                        "Ref": "AWS::Region"
                                      },
                                      ":",
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      ":",
                                      {
                                        "Ref": "helloworldB7C45939"
                                      },
                                      "/",
                                      {
                                        "Ref": "helloworldDeploymentStageprodFE6F1BE9"
                                      },
                                      "/*/*"
                                    ]
                                  ]
                                }
                              }
                            }
                          },
                          "ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..{proxy+}": {
                            "id": "ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..{proxy+}",
                            "path": "lambda/helloworld/Default/{proxy+}/ANY/ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..{proxy+}",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                              "aws:cdk:cloudformation:props": {
                                "action": "lambda:InvokeFunction",
                                "functionName": {
                                  "Fn::GetAtt": [
                                    "helloworldfunctionBF65BD73",
                                    "Arn"
                                  ]
                                },
                                "principal": "apigateway.amazonaws.com",
                                "sourceArn": {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "arn:",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      ":execute-api:",
                                      {
                                        "Ref": "AWS::Region"
                                      },
                                      ":",
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      ":",
                                      {
                                        "Ref": "helloworldB7C45939"
                                      },
                                      "/test-invoke-stage/*/*"
                                    ]
                                  ]
                                }
                              }
                            }
                          },
                          "Resource": {
                            "id": "Resource",
                            "path": "lambda/helloworld/Default/{proxy+}/ANY/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::ApiGateway::Method",
                              "aws:cdk:cloudformation:props": {
                                "httpMethod": "ANY",
                                "resourceId": {
                                  "Ref": "helloworldproxy896C4F8E"
                                },
                                "restApiId": {
                                  "Ref": "helloworldB7C45939"
                                },
                                "authorizationType": "NONE",
                                "integration": {
                                  "type": "AWS_PROXY",
                                  "uri": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":apigateway:",
                                        {
                                          "Ref": "AWS::Region"
                                        },
                                        ":lambda:path/2015-03-31/functions/",
                                        {
                                          "Fn::GetAtt": [
                                            "helloworldfunctionBF65BD73",
                                            "Arn"
                                          ]
                                        },
                                        "/invocations"
                                      ]
                                    ]
                                  },
                                  "integrationHttpMethod": "POST"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "ANY": {
                    "id": "ANY",
                    "path": "lambda/helloworld/Default/ANY",
                    "children": {
                      "ApiPermission.lambdahelloworldFF59B2B1.ANY..": {
                        "id": "ApiPermission.lambdahelloworldFF59B2B1.ANY..",
                        "path": "lambda/helloworld/Default/ANY/ApiPermission.lambdahelloworldFF59B2B1.ANY..",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                          "aws:cdk:cloudformation:props": {
                            "action": "lambda:InvokeFunction",
                            "functionName": {
                              "Fn::GetAtt": [
                                "helloworldfunctionBF65BD73",
                                "Arn"
                              ]
                            },
                            "principal": "apigateway.amazonaws.com",
                            "sourceArn": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":execute-api:",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  ":",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":",
                                  {
                                    "Ref": "helloworldB7C45939"
                                  },
                                  "/",
                                  {
                                    "Ref": "helloworldDeploymentStageprodFE6F1BE9"
                                  },
                                  "/*/"
                                ]
                              ]
                            }
                          }
                        }
                      },
                      "ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..": {
                        "id": "ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..",
                        "path": "lambda/helloworld/Default/ANY/ApiPermission.Test.lambdahelloworldFF59B2B1.ANY..",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                          "aws:cdk:cloudformation:props": {
                            "action": "lambda:InvokeFunction",
                            "functionName": {
                              "Fn::GetAtt": [
                                "helloworldfunctionBF65BD73",
                                "Arn"
                              ]
                            },
                            "principal": "apigateway.amazonaws.com",
                            "sourceArn": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":execute-api:",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  ":",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":",
                                  {
                                    "Ref": "helloworldB7C45939"
                                  },
                                  "/test-invoke-stage/*/"
                                ]
                              ]
                            }
                          }
                        }
                      },
                      "Resource": {
                        "id": "Resource",
                        "path": "lambda/helloworld/Default/ANY/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::ApiGateway::Method",
                          "aws:cdk:cloudformation:props": {
                            "httpMethod": "ANY",
                            "resourceId": {
                              "Fn::GetAtt": [
                                "helloworldB7C45939",
                                "RootResourceId"
                              ]
                            },
                            "restApiId": {
                              "Ref": "helloworldB7C45939"
                            },
                            "authorizationType": "NONE",
                            "integration": {
                              "type": "AWS_PROXY",
                              "uri": {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":apigateway:",
                                    {
                                      "Ref": "AWS::Region"
                                    },
                                    ":lambda:path/2015-03-31/functions/",
                                    {
                                      "Fn::GetAtt": [
                                        "helloworldfunctionBF65BD73",
                                        "Arn"
                                      ]
                                    },
                                    "/invocations"
                                  ]
                                ]
                              },
                              "integrationHttpMethod": "POST"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "cp-backend": {
        "id": "cp-backend",
        "path": "cp-backend",
        "children": {
          "artifactbucket": {
            "id": "artifactbucket",
            "path": "cp-backend/artifactbucket"
          },
          "buildproject": {
            "id": "buildproject",
            "path": "cp-backend/buildproject",
            "children": {
              "Role": {
                "id": "Role",
                "path": "cp-backend/buildproject/Role",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-backend/buildproject/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "codebuild.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/AdministratorAccess"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "cp-backend/buildproject/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "cp-backend/buildproject/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::ImportValue": "build-artifacts-bucket"
                                          }
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::ImportValue": "build-artifacts-bucket"
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":logs:",
                                          {
                                            "Ref": "AWS::Region"
                                          },
                                          ":",
                                          {
                                            "Ref": "AWS::AccountId"
                                          },
                                          ":log-group:/aws/codebuild/",
                                          {
                                            "Ref": "buildproject87EEBE72"
                                          }
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":logs:",
                                          {
                                            "Ref": "AWS::Region"
                                          },
                                          ":",
                                          {
                                            "Ref": "AWS::AccountId"
                                          },
                                          ":log-group:/aws/codebuild/",
                                          {
                                            "Ref": "buildproject87EEBE72"
                                          },
                                          ":*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "codebuild:CreateReportGroup",
                                    "codebuild:CreateReport",
                                    "codebuild:UpdateReport",
                                    "codebuild:BatchPutTestCases"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":codebuild:",
                                        {
                                          "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                          "Ref": "AWS::AccountId"
                                        },
                                        ":report-group/",
                                        {
                                          "Ref": "buildproject87EEBE72"
                                        },
                                        "-*"
                                      ]
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "buildprojectRoleDefaultPolicyA8DD865E",
                            "roles": [
                              {
                                "Ref": "buildprojectRoleB4D7D8AB"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "cp-backend/buildproject/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CodeBuild::Project",
                  "aws:cdk:cloudformation:props": {
                    "artifacts": {
                      "type": "CODEPIPELINE"
                    },
                    "environment": {
                      "type": "LINUX_CONTAINER",
                      "image": "aws/codebuild/standard:3.0",
                      "privilegedMode": false,
                      "computeType": "BUILD_GENERAL1_SMALL",
                      "environmentVariables": [
                        {
                          "name": "ENV",
                          "type": "PLAINTEXT",
                          "value": "dev"
                        },
                        {
                          "name": "PRJ",
                          "type": "PLAINTEXT",
                          "value": "serverless"
                        },
                        {
                          "name": "STAGE",
                          "type": "PLAINTEXT",
                          "value": "dev"
                        }
                      ]
                    },
                    "serviceRole": {
                      "Fn::GetAtt": [
                        "buildprojectRoleB4D7D8AB",
                        "Arn"
                      ]
                    },
                    "source": {
                      "type": "CODEPIPELINE",
                      "buildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"echo \\\"--INSTALL PHASE--\\\" \",\n        \"npm install --silent --no-progress serverless -g\"\n      ]\n    },\n    \"pre_build\": {\n      \"commands\": [\n        \"echo \\\"--PRE BUILD PHASE--\\\"\",\n        \"npm install --silent --no-progress\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"echo \\\"--BUILD PHASE--\\\" \",\n        \"serverless deploy -s $STAGE\"\n      ]\n    }\n  },\n  \"artifacts\": {\n    \"files\": [\n      \"**/*\"\n    ],\n    \"base-directory\": \".serverless\"\n  }\n}"
                    },
                    "cache": {
                      "type": "S3",
                      "location": {
                        "Fn::Join": [
                          "/",
                          [
                            {
                              "Fn::ImportValue": "build-artifacts-bucket"
                            },
                            "codebuild-cache"
                          ]
                        ]
                      }
                    },
                    "description": "package lambda functions",
                    "name": "dev-serverless-build-project"
                  }
                }
              }
            }
          },
          "backend-pipeline": {
            "id": "backend-pipeline",
            "path": "cp-backend/backend-pipeline",
            "children": {
              "Role": {
                "id": "Role",
                "path": "cp-backend/backend-pipeline/Role",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-backend/backend-pipeline/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "codepipeline.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "cp-backend/backend-pipeline/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "cp-backend/backend-pipeline/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::ImportValue": "build-artifacts-bucket"
                                          }
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":s3:::",
                                          {
                                            "Fn::ImportValue": "build-artifacts-bucket"
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "backendpipelineDeployDeployToDevCodePipelineActionRoleC732A20B",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "backendpipelineRoleDefaultPolicyAF6F9348",
                            "roles": [
                              {
                                "Ref": "backendpipelineRole59DF2843"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "cp-backend/backend-pipeline/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CodePipeline::Pipeline",
                  "aws:cdk:cloudformation:props": {
                    "roleArn": {
                      "Fn::GetAtt": [
                        "backendpipelineRole59DF2843",
                        "Arn"
                      ]
                    },
                    "stages": [
                      {
                        "name": "Source",
                        "actions": [
                          {
                            "name": "GitHubSource",
                            "outputArtifacts": [
                              {
                                "name": "source"
                              }
                            ],
                            "actionTypeId": {
                              "category": "Source",
                              "version": "1",
                              "owner": "ThirdParty",
                              "provider": "GitHub"
                            },
                            "configuration": {
                              "Owner": "nixsupport",
                              "Repo": "devops",
                              "Branch": "master",
                              "OAuthToken": "{{resolve:secretsmanager:dev/github-token:SecretString:github-token::}}",
                              "PollForSourceChanges": false
                            },
                            "runOrder": 1
                          }
                        ]
                      },
                      {
                        "name": "Deploy",
                        "actions": [
                          {
                            "name": "DeployToDev",
                            "inputArtifacts": [
                              {
                                "name": "source"
                              }
                            ],
                            "outputArtifacts": [
                              {
                                "name": "build"
                              }
                            ],
                            "actionTypeId": {
                              "category": "Build",
                              "version": "1",
                              "owner": "AWS",
                              "provider": "CodeBuild"
                            },
                            "configuration": {
                              "ProjectName": {
                                "Ref": "buildproject87EEBE72"
                              }
                            },
                            "runOrder": 1,
                            "roleArn": {
                              "Fn::GetAtt": [
                                "backendpipelineDeployDeployToDevCodePipelineActionRoleC732A20B",
                                "Arn"
                              ]
                            }
                          }
                        ]
                      }
                    ],
                    "artifactStore": {
                      "type": "S3",
                      "location": {
                        "Fn::ImportValue": "build-artifacts-bucket"
                      }
                    },
                    "name": "dev-serverless-backend-pipeline",
                    "restartExecutionOnUpdate": false
                  }
                }
              },
              "Source": {
                "id": "Source",
                "path": "cp-backend/backend-pipeline/Source",
                "children": {
                  "GitHubSource": {
                    "id": "GitHubSource",
                    "path": "cp-backend/backend-pipeline/Source/GitHubSource",
                    "children": {
                      "WebhookResource": {
                        "id": "WebhookResource",
                        "path": "cp-backend/backend-pipeline/Source/GitHubSource/WebhookResource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::CodePipeline::Webhook",
                          "aws:cdk:cloudformation:props": {
                            "authentication": "GITHUB_HMAC",
                            "authenticationConfiguration": {
                              "secretToken": "{{resolve:secretsmanager:dev/github-token:SecretString:github-token::}}"
                            },
                            "filters": [
                              {
                                "jsonPath": "$.ref",
                                "matchEquals": "refs/heads/{Branch}"
                              }
                            ],
                            "targetAction": "GitHubSource",
                            "targetPipeline": {
                              "Ref": "backendpipelineDB62E984"
                            },
                            "targetPipelineVersion": 1,
                            "registerWithThirdParty": true
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Deploy": {
                "id": "Deploy",
                "path": "cp-backend/backend-pipeline/Deploy",
                "children": {
                  "DeployToDev": {
                    "id": "DeployToDev",
                    "path": "cp-backend/backend-pipeline/Deploy/DeployToDev",
                    "children": {
                      "CodePipelineActionRole": {
                        "id": "CodePipelineActionRole",
                        "path": "cp-backend/backend-pipeline/Deploy/DeployToDev/CodePipelineActionRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "cp-backend/backend-pipeline/Deploy/DeployToDev/CodePipelineActionRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "AWS": {
                                          "Fn::Join": [
                                            "",
                                            [
                                              "arn:",
                                              {
                                                "Ref": "AWS::Partition"
                                              },
                                              ":iam::",
                                              {
                                                "Ref": "AWS::AccountId"
                                              },
                                              ":root"
                                            ]
                                          ]
                                        }
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "cp-backend/backend-pipeline/Deploy/DeployToDev/CodePipelineActionRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "cp-backend/backend-pipeline/Deploy/DeployToDev/CodePipelineActionRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "codebuild:BatchGetBuilds",
                                            "codebuild:StartBuild",
                                            "codebuild:StopBuild"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::GetAtt": [
                                              "buildproject87EEBE72",
                                              "Arn"
                                            ]
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "backendpipelineDeployDeployToDevCodePipelineActionRoleDefaultPolicy187CE14C",
                                    "roles": [
                                      {
                                        "Ref": "backendpipelineDeployDeployToDevCodePipelineActionRoleC732A20B"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "accountid": {
            "id": "accountid",
            "path": "cp-backend/accountid",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cp-backend/accountid/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "AWS::AccountId"
                    },
                    "name": "/dev/account-id"
                  }
                }
              }
            }
          },
          "region": {
            "id": "region",
            "path": "cp-backend/region",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cp-backend/region/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "AWS::Region"
                    },
                    "name": "/dev/region"
                  }
                }
              }
            }
          }
        }
      },
      "notification": {
        "id": "notification",
        "path": "notification",
        "children": {
          "notificationlambda": {
            "id": "notificationlambda",
            "path": "notification/notificationlambda",
            "children": {
              "ServiceRole": {
                "id": "ServiceRole",
                "path": "notification/notificationlambda/ServiceRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "notification/notificationlambda/ServiceRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "lambda.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "managedPolicyArns": [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                              ]
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "Code": {
                "id": "Code",
                "path": "notification/notificationlambda/Code",
                "children": {
                  "Stage": {
                    "id": "Stage",
                    "path": "notification/notificationlambda/Code/Stage"
                  },
                  "AssetBucket": {
                    "id": "AssetBucket",
                    "path": "notification/notificationlambda/Code/AssetBucket"
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "notification/notificationlambda/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "s3Bucket": {
                        "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3Bucket82FD63F1"
                      },
                      "s3Key": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::Select": [
                                0,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3VersionKey9E8DC775"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "Fn::Select": [
                                1,
                                {
                                  "Fn::Split": [
                                    "||",
                                    {
                                      "Ref": "AssetParameters54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3S3VersionKey9E8DC775"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    },
                    "handler": "hello.handler",
                    "role": {
                      "Fn::GetAtt": [
                        "notificationlambdaServiceRole3787616C",
                        "Arn"
                      ]
                    },
                    "runtime": "python3.8"
                  }
                }
              },
              "AllowEventRulenotificationcwrule17CEFD7D": {
                "id": "AllowEventRulenotificationcwrule17CEFD7D",
                "path": "notification/notificationlambda/AllowEventRulenotificationcwrule17CEFD7D",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                  "aws:cdk:cloudformation:props": {
                    "action": "lambda:InvokeFunction",
                    "functionName": {
                      "Fn::GetAtt": [
                        "notificationlambdaD5FA1346",
                        "Arn"
                      ]
                    },
                    "principal": "events.amazonaws.com",
                    "sourceArn": {
                      "Fn::GetAtt": [
                        "cwruleA81B06E0",
                        "Arn"
                      ]
                    }
                  }
                }
              },
              "AllowInvoke:notificationlambdatopic46356345": {
                "id": "AllowInvoke:notificationlambdatopic46356345",
                "path": "notification/notificationlambda/AllowInvoke:notificationlambdatopic46356345",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                  "aws:cdk:cloudformation:props": {
                    "action": "lambda:InvokeFunction",
                    "functionName": {
                      "Fn::GetAtt": [
                        "notificationlambdaD5FA1346",
                        "Arn"
                      ]
                    },
                    "principal": "sns.amazonaws.com",
                    "sourceArn": {
                      "Ref": "lambdatopicE59B936D"
                    }
                  }
                }
              },
              "lambdatopic": {
                "id": "lambdatopic",
                "path": "notification/notificationlambda/lambdatopic",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "notification/notificationlambda/lambdatopic/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::SNS::Subscription",
                      "aws:cdk:cloudformation:props": {
                        "protocol": "lambda",
                        "topicArn": {
                          "Ref": "lambdatopicE59B936D"
                        },
                        "endpoint": {
                          "Fn::GetAtt": [
                            "notificationlambdaD5FA1346",
                            "Arn"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "AssetParameters": {
            "id": "AssetParameters",
            "path": "notification/AssetParameters",
            "children": {
              "54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3": {
                "id": "54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3",
                "path": "notification/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "notification/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "notification/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "notification/AssetParameters/54e4fab654d575c62548f54d7312a0b7b4561957e72b191fc4e6a4594cb609f3/ArtifactHash"
                  }
                }
              }
            }
          },
          "cwrule": {
            "id": "cwrule",
            "path": "notification/cwrule",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "notification/cwrule/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Events::Rule",
                  "aws:cdk:cloudformation:props": {
                    "scheduleExpression": "cron(0 5 ? * * *)",
                    "state": "ENABLED",
                    "targets": [
                      {
                        "id": "Target0",
                        "arn": {
                          "Fn::GetAtt": [
                            "notificationlambdaD5FA1346",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "lambdatopic": {
            "id": "lambdatopic",
            "path": "notification/lambdatopic",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "notification/lambdatopic/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SNS::Topic",
                  "aws:cdk:cloudformation:props": {
                    "topicName": "serverless-lambda-topic"
                  }
                }
              }
            }
          }
        }
      },
      "cp-frontend": {
        "id": "cp-frontend",
        "path": "cp-frontend",
        "children": {
          "webhosting-id": {
            "id": "webhosting-id",
            "path": "cp-frontend/webhosting-id"
          },
          "cdnid.Parameter": {
            "id": "cdnid.Parameter",
            "path": "cp-frontend/cdnid.Parameter"
          },
          "cdnid": {
            "id": "cdnid",
            "path": "cp-frontend/cdnid"
          },
          "repoid": {
            "id": "repoid",
            "path": "cp-frontend/repoid",
            "children": {
              "cpfrontendfrontendpipelineF0DE274FEventRule": {
                "id": "cpfrontendfrontendpipelineF0DE274FEventRule",
                "path": "cp-frontend/repoid/cpfrontendfrontendpipelineF0DE274FEventRule",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-frontend/repoid/cpfrontendfrontendpipelineF0DE274FEventRule/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::Events::Rule",
                      "aws:cdk:cloudformation:props": {
                        "eventPattern": {
                          "source": [
                            "aws.codecommit"
                          ],
                          "resources": [
                            {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":codecommit:",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  ":",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":devops"
                                ]
                              ]
                            }
                          ],
                          "detail-type": [
                            "CodeCommit Repository State Change"
                          ],
                          "detail": {
                            "event": [
                              "referenceCreated",
                              "referenceUpdated"
                            ],
                            "referenceName": [
                              "master"
                            ]
                          }
                        },
                        "state": "ENABLED",
                        "targets": [
                          {
                            "id": "Target0",
                            "arn": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":codepipeline:",
                                  {
                                    "Ref": "AWS::Region"
                                  },
                                  ":",
                                  {
                                    "Ref": "AWS::AccountId"
                                  },
                                  ":",
                                  {
                                    "Ref": "frontendpipelineB0F3910E"
                                  }
                                ]
                              ]
                            },
                            "roleArn": {
                              "Fn::GetAtt": [
                                "frontendpipelineEventsRole1AC8EDA4",
                                "Arn"
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "artifactbucketid": {
            "id": "artifactbucketid",
            "path": "cp-frontend/artifactbucketid",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cp-frontend/artifactbucketid/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::S3::Bucket",
                  "aws:cdk:cloudformation:props": {
                    "accessControl": "BucketOwnerFullControl",
                    "bucketEncryption": {
                      "serverSideEncryptionConfiguration": [
                        {
                          "serverSideEncryptionByDefault": {
                            "sseAlgorithm": "AES256"
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "Notifications": {
                "id": "Notifications",
                "path": "cp-frontend/artifactbucketid/Notifications"
              }
            }
          },
          "buildfrontend": {
            "id": "buildfrontend",
            "path": "cp-frontend/buildfrontend",
            "children": {
              "Role": {
                "id": "Role",
                "path": "cp-frontend/buildfrontend/Role",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-frontend/buildfrontend/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "codebuild.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "cp-frontend/buildfrontend/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "cp-frontend/buildfrontend/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "artifactbucketidF6C7D8BB",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          {
                                            "Fn::GetAtt": [
                                              "artifactbucketidF6C7D8BB",
                                              "Arn"
                                            ]
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":logs:",
                                          {
                                            "Ref": "AWS::Region"
                                          },
                                          ":",
                                          {
                                            "Ref": "AWS::AccountId"
                                          },
                                          ":log-group:/aws/codebuild/",
                                          {
                                            "Ref": "buildfrontendC2BD8F2D"
                                          }
                                        ]
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          "arn:",
                                          {
                                            "Ref": "AWS::Partition"
                                          },
                                          ":logs:",
                                          {
                                            "Ref": "AWS::Region"
                                          },
                                          ":",
                                          {
                                            "Ref": "AWS::AccountId"
                                          },
                                          ":log-group:/aws/codebuild/",
                                          {
                                            "Ref": "buildfrontendC2BD8F2D"
                                          },
                                          ":*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": [
                                    "codebuild:CreateReportGroup",
                                    "codebuild:CreateReport",
                                    "codebuild:UpdateReport",
                                    "codebuild:BatchPutTestCases"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":codebuild:",
                                        {
                                          "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                          "Ref": "AWS::AccountId"
                                        },
                                        ":report-group/",
                                        {
                                          "Ref": "buildfrontendC2BD8F2D"
                                        },
                                        "-*"
                                      ]
                                    ]
                                  }
                                },
                                {
                                  "Action": "cloudfront:CreateInvalidation",
                                  "Effect": "Allow",
                                  "Resource": "*"
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "buildfrontendRoleDefaultPolicy140087A7",
                            "roles": [
                              {
                                "Ref": "buildfrontendRole4A834F0E"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "cp-frontend/buildfrontend/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CodeBuild::Project",
                  "aws:cdk:cloudformation:props": {
                    "artifacts": {
                      "type": "CODEPIPELINE"
                    },
                    "environment": {
                      "type": "LINUX_CONTAINER",
                      "image": "aws/codebuild/standard:3.0",
                      "privilegedMode": false,
                      "computeType": "BUILD_GENERAL1_SMALL",
                      "environmentVariables": [
                        {
                          "name": "distributionid",
                          "type": "PLAINTEXT",
                          "value": {
                            "Ref": "cdnidParameter"
                          }
                        }
                      ]
                    },
                    "serviceRole": {
                      "Fn::GetAtt": [
                        "buildfrontendRole4A834F0E",
                        "Arn"
                      ]
                    },
                    "source": {
                      "type": "CODEPIPELINE",
                      "buildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"install\": {\n      \"commands\": [\n        \"pip install awscli\"\n      ]\n    },\n    \"pre_build\": {\n      \"commands\": [\n        \"yarn install\"\n      ]\n    },\n    \"build\": {\n      \"commands\": [\n        \"yarn run build\"\n      ]\n    },\n    \"post_build\": {\n      \"commands\": [\n        \"aws cloudfront create-invalidation --distribution-id $distributionid --paths \\\"/*\\\" \"\n      ]\n    }\n  },\n  \"artifacts\": {\n    \"files\": [\n      \"build/**/*\"\n    ]\n  },\n  \"cache\": {\n    \"paths\": [\n      \"./node_modules/**/*\"\n    ]\n  }\n}"
                    },
                    "cache": {
                      "type": "S3",
                      "location": {
                        "Fn::Join": [
                          "/",
                          [
                            {
                              "Ref": "artifactbucketidF6C7D8BB"
                            },
                            "codebuild-cache"
                          ]
                        ]
                      }
                    },
                    "description": "frontend project for SPA",
                    "name": "BuildFrontend"
                  }
                }
              }
            }
          },
          "frontend-pipeline": {
            "id": "frontend-pipeline",
            "path": "cp-frontend/frontend-pipeline",
            "children": {
              "Role": {
                "id": "Role",
                "path": "cp-frontend/frontend-pipeline/Role",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-frontend/frontend-pipeline/Role/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "codepipeline.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "cp-frontend/frontend-pipeline/Role/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "cp-frontend/frontend-pipeline/Role/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": [
                                    "s3:GetObject*",
                                    "s3:GetBucket*",
                                    "s3:List*",
                                    "s3:DeleteObject*",
                                    "s3:PutObject*",
                                    "s3:Abort*"
                                  ],
                                  "Effect": "Allow",
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": [
                                        "artifactbucketidF6C7D8BB",
                                        "Arn"
                                      ]
                                    },
                                    {
                                      "Fn::Join": [
                                        "",
                                        [
                                          {
                                            "Fn::GetAtt": [
                                              "artifactbucketidF6C7D8BB",
                                              "Arn"
                                            ]
                                          },
                                          "/*"
                                        ]
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "frontendpipelineSourceCodeCommitSourceCodePipelineActionRoleB5779F9F",
                                      "Arn"
                                    ]
                                  }
                                },
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "frontendpipelineBuildCodePipelineActionRoleA39AF7CA",
                                      "Arn"
                                    ]
                                  }
                                },
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::GetAtt": [
                                      "frontendpipelineDeployCodePipelineActionRole1E2D810E",
                                      "Arn"
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "frontendpipelineRoleDefaultPolicyDA92DB0E",
                            "roles": [
                              {
                                "Ref": "frontendpipelineRoleA0D54F2E"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Resource": {
                "id": "Resource",
                "path": "cp-frontend/frontend-pipeline/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CodePipeline::Pipeline",
                  "aws:cdk:cloudformation:props": {
                    "roleArn": {
                      "Fn::GetAtt": [
                        "frontendpipelineRoleA0D54F2E",
                        "Arn"
                      ]
                    },
                    "stages": [
                      {
                        "name": "Source",
                        "actions": [
                          {
                            "name": "CodeCommitSource",
                            "outputArtifacts": [
                              {
                                "name": "source"
                              }
                            ],
                            "actionTypeId": {
                              "category": "Source",
                              "version": "1",
                              "owner": "AWS",
                              "provider": "CodeCommit"
                            },
                            "configuration": {
                              "RepositoryName": "devops",
                              "BranchName": "master",
                              "PollForSourceChanges": false
                            },
                            "runOrder": 1,
                            "roleArn": {
                              "Fn::GetAtt": [
                                "frontendpipelineSourceCodeCommitSourceCodePipelineActionRoleB5779F9F",
                                "Arn"
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "name": "Build",
                        "actions": [
                          {
                            "name": "Build",
                            "inputArtifacts": [
                              {
                                "name": "source"
                              }
                            ],
                            "outputArtifacts": [
                              {
                                "name": "build"
                              }
                            ],
                            "actionTypeId": {
                              "category": "Build",
                              "version": "1",
                              "owner": "AWS",
                              "provider": "CodeBuild"
                            },
                            "configuration": {
                              "ProjectName": {
                                "Ref": "buildfrontendC2BD8F2D"
                              }
                            },
                            "runOrder": 1,
                            "roleArn": {
                              "Fn::GetAtt": [
                                "frontendpipelineBuildCodePipelineActionRoleA39AF7CA",
                                "Arn"
                              ]
                            }
                          }
                        ]
                      },
                      {
                        "name": "Deploy",
                        "actions": [
                          {
                            "name": "Deploy",
                            "inputArtifacts": [
                              {
                                "name": "build"
                              }
                            ],
                            "actionTypeId": {
                              "category": "Deploy",
                              "version": "1",
                              "owner": "AWS",
                              "provider": "S3"
                            },
                            "configuration": {
                              "BucketName": {
                                "Fn::ImportValue": "frontend-bucket"
                              },
                              "Extract": "true"
                            },
                            "runOrder": 1,
                            "roleArn": {
                              "Fn::GetAtt": [
                                "frontendpipelineDeployCodePipelineActionRole1E2D810E",
                                "Arn"
                              ]
                            }
                          }
                        ]
                      }
                    ],
                    "artifactStore": {
                      "type": "S3",
                      "location": {
                        "Ref": "artifactbucketidF6C7D8BB"
                      }
                    },
                    "name": "serverless-dev-frontend-pipeline",
                    "restartExecutionOnUpdate": false
                  }
                }
              },
              "Source": {
                "id": "Source",
                "path": "cp-frontend/frontend-pipeline/Source",
                "children": {
                  "CodeCommitSource": {
                    "id": "CodeCommitSource",
                    "path": "cp-frontend/frontend-pipeline/Source/CodeCommitSource",
                    "children": {
                      "CodePipelineActionRole": {
                        "id": "CodePipelineActionRole",
                        "path": "cp-frontend/frontend-pipeline/Source/CodeCommitSource/CodePipelineActionRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "cp-frontend/frontend-pipeline/Source/CodeCommitSource/CodePipelineActionRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "AWS": {
                                          "Fn::Join": [
                                            "",
                                            [
                                              "arn:",
                                              {
                                                "Ref": "AWS::Partition"
                                              },
                                              ":iam::",
                                              {
                                                "Ref": "AWS::AccountId"
                                              },
                                              ":root"
                                            ]
                                          ]
                                        }
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "cp-frontend/frontend-pipeline/Source/CodeCommitSource/CodePipelineActionRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "cp-frontend/frontend-pipeline/Source/CodeCommitSource/CodePipelineActionRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "s3:GetObject*",
                                            "s3:GetBucket*",
                                            "s3:List*",
                                            "s3:DeleteObject*",
                                            "s3:PutObject*",
                                            "s3:Abort*"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "artifactbucketidF6C7D8BB",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Fn::Join": [
                                                "",
                                                [
                                                  {
                                                    "Fn::GetAtt": [
                                                      "artifactbucketidF6C7D8BB",
                                                      "Arn"
                                                    ]
                                                  },
                                                  "/*"
                                                ]
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "Action": [
                                            "codecommit:GetBranch",
                                            "codecommit:GetCommit",
                                            "codecommit:UploadArchive",
                                            "codecommit:GetUploadArchiveStatus",
                                            "codecommit:CancelUploadArchive"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::Join": [
                                              "",
                                              [
                                                "arn:",
                                                {
                                                  "Ref": "AWS::Partition"
                                                },
                                                ":codecommit:",
                                                {
                                                  "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                  "Ref": "AWS::AccountId"
                                                },
                                                ":devops"
                                              ]
                                            ]
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "frontendpipelineSourceCodeCommitSourceCodePipelineActionRoleDefaultPolicy5CBBF2B4",
                                    "roles": [
                                      {
                                        "Ref": "frontendpipelineSourceCodeCommitSourceCodePipelineActionRoleB5779F9F"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "EventsRole": {
                "id": "EventsRole",
                "path": "cp-frontend/frontend-pipeline/EventsRole",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "cp-frontend/frontend-pipeline/EventsRole/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                      "aws:cdk:cloudformation:props": {
                        "assumeRolePolicyDocument": {
                          "Statement": [
                            {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "events.amazonaws.com"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    }
                  },
                  "DefaultPolicy": {
                    "id": "DefaultPolicy",
                    "path": "cp-frontend/frontend-pipeline/EventsRole/DefaultPolicy",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "cp-frontend/frontend-pipeline/EventsRole/DefaultPolicy/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                          "aws:cdk:cloudformation:props": {
                            "policyDocument": {
                              "Statement": [
                                {
                                  "Action": "codepipeline:StartPipelineExecution",
                                  "Effect": "Allow",
                                  "Resource": {
                                    "Fn::Join": [
                                      "",
                                      [
                                        "arn:",
                                        {
                                          "Ref": "AWS::Partition"
                                        },
                                        ":codepipeline:",
                                        {
                                          "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                          "Ref": "AWS::AccountId"
                                        },
                                        ":",
                                        {
                                          "Ref": "frontendpipelineB0F3910E"
                                        }
                                      ]
                                    ]
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "policyName": "frontendpipelineEventsRoleDefaultPolicyA47E539F",
                            "roles": [
                              {
                                "Ref": "frontendpipelineEventsRole1AC8EDA4"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Build": {
                "id": "Build",
                "path": "cp-frontend/frontend-pipeline/Build",
                "children": {
                  "Build": {
                    "id": "Build",
                    "path": "cp-frontend/frontend-pipeline/Build/Build",
                    "children": {
                      "CodePipelineActionRole": {
                        "id": "CodePipelineActionRole",
                        "path": "cp-frontend/frontend-pipeline/Build/Build/CodePipelineActionRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "cp-frontend/frontend-pipeline/Build/Build/CodePipelineActionRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "AWS": {
                                          "Fn::Join": [
                                            "",
                                            [
                                              "arn:",
                                              {
                                                "Ref": "AWS::Partition"
                                              },
                                              ":iam::",
                                              {
                                                "Ref": "AWS::AccountId"
                                              },
                                              ":root"
                                            ]
                                          ]
                                        }
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "cp-frontend/frontend-pipeline/Build/Build/CodePipelineActionRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "cp-frontend/frontend-pipeline/Build/Build/CodePipelineActionRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "codebuild:BatchGetBuilds",
                                            "codebuild:StartBuild",
                                            "codebuild:StopBuild"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": {
                                            "Fn::GetAtt": [
                                              "buildfrontendC2BD8F2D",
                                              "Arn"
                                            ]
                                          }
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "frontendpipelineBuildCodePipelineActionRoleDefaultPolicy8176B099",
                                    "roles": [
                                      {
                                        "Ref": "frontendpipelineBuildCodePipelineActionRoleA39AF7CA"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Deploy": {
                "id": "Deploy",
                "path": "cp-frontend/frontend-pipeline/Deploy",
                "children": {
                  "Deploy": {
                    "id": "Deploy",
                    "path": "cp-frontend/frontend-pipeline/Deploy/Deploy",
                    "children": {
                      "CodePipelineActionRole": {
                        "id": "CodePipelineActionRole",
                        "path": "cp-frontend/frontend-pipeline/Deploy/Deploy/CodePipelineActionRole",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "cp-frontend/frontend-pipeline/Deploy/Deploy/CodePipelineActionRole/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                              "aws:cdk:cloudformation:props": {
                                "assumeRolePolicyDocument": {
                                  "Statement": [
                                    {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": {
                                        "AWS": {
                                          "Fn::Join": [
                                            "",
                                            [
                                              "arn:",
                                              {
                                                "Ref": "AWS::Partition"
                                              },
                                              ":iam::",
                                              {
                                                "Ref": "AWS::AccountId"
                                              },
                                              ":root"
                                            ]
                                          ]
                                        }
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                }
                              }
                            }
                          },
                          "DefaultPolicy": {
                            "id": "DefaultPolicy",
                            "path": "cp-frontend/frontend-pipeline/Deploy/Deploy/CodePipelineActionRole/DefaultPolicy",
                            "children": {
                              "Resource": {
                                "id": "Resource",
                                "path": "cp-frontend/frontend-pipeline/Deploy/Deploy/CodePipelineActionRole/DefaultPolicy/Resource",
                                "attributes": {
                                  "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                                  "aws:cdk:cloudformation:props": {
                                    "policyDocument": {
                                      "Statement": [
                                        {
                                          "Action": [
                                            "s3:DeleteObject*",
                                            "s3:PutObject*",
                                            "s3:Abort*"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::Join": [
                                                "",
                                                [
                                                  "arn:",
                                                  {
                                                    "Ref": "AWS::Partition"
                                                  },
                                                  ":s3:::",
                                                  {
                                                    "Fn::ImportValue": "frontend-bucket"
                                                  }
                                                ]
                                              ]
                                            },
                                            {
                                              "Fn::Join": [
                                                "",
                                                [
                                                  "arn:",
                                                  {
                                                    "Ref": "AWS::Partition"
                                                  },
                                                  ":s3:::",
                                                  {
                                                    "Fn::ImportValue": "frontend-bucket"
                                                  },
                                                  "/*"
                                                ]
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "Action": [
                                            "s3:GetObject*",
                                            "s3:GetBucket*",
                                            "s3:List*"
                                          ],
                                          "Effect": "Allow",
                                          "Resource": [
                                            {
                                              "Fn::GetAtt": [
                                                "artifactbucketidF6C7D8BB",
                                                "Arn"
                                              ]
                                            },
                                            {
                                              "Fn::Join": [
                                                "",
                                                [
                                                  {
                                                    "Fn::GetAtt": [
                                                      "artifactbucketidF6C7D8BB",
                                                      "Arn"
                                                    ]
                                                  },
                                                  "/*"
                                                ]
                                              ]
                                            }
                                          ]
                                        }
                                      ],
                                      "Version": "2012-10-17"
                                    },
                                    "policyName": "frontendpipelineDeployCodePipelineActionRoleDefaultPolicy986E6263",
                                    "roles": [
                                      {
                                        "Ref": "frontendpipelineDeployCodePipelineActionRole1E2D810E"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "waf": {
        "id": "waf",
        "path": "waf",
        "children": {
          "web-acl-id": {
            "id": "web-acl-id",
            "path": "waf/web-acl-id",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::WAFv2::WebACL",
              "aws:cdk:cloudformation:props": {
                "defaultAction": {
                  "allow": {}
                },
                "scope": "CLOUDFRONT",
                "visibilityConfig": {
                  "cloudWatchMetricsEnabled": true,
                  "metricName": "serverless-dev",
                  "sampledRequestsEnabled": true
                },
                "name": "serverless-devwebacl",
                "rules": [
                  {
                    "name": "AWSManagedCommonRule",
                    "priority": 0,
                    "statement": {
                      "managedRuleGroupStatement": {
                        "name": "AWSManagedRulesCommonRuleSet",
                        "vendorName": "AWS"
                      }
                    },
                    "visibilityConfig": {
                      "cloudWatchMetricsEnabled": true,
                      "metricName": "AWSManagedCommonRule",
                      "sampledRequestsEnabled": true
                    },
                    "overrideAction": {
                      "count": {}
                    }
                  }
                ]
              }
            }
          },
          "webacl-id-ssm": {
            "id": "webacl-id-ssm",
            "path": "waf/webacl-id-ssm",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "waf/webacl-id-ssm/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::GetAtt": [
                        "webaclid",
                        "Id"
                      ]
                    },
                    "name": "/dev/webacl-id"
                  }
                }
              }
            }
          }
        }
      },
      "acm": {
        "id": "acm",
        "path": "acm",
        "children": {
          "zone-id-ssm.Parameter": {
            "id": "zone-id-ssm.Parameter",
            "path": "acm/zone-id-ssm.Parameter"
          },
          "zone-id-ssm": {
            "id": "zone-id-ssm",
            "path": "acm/zone-id-ssm"
          },
          "hosted-zone": {
            "id": "hosted-zone",
            "path": "acm/hosted-zone"
          },
          "acm-id": {
            "id": "acm-id",
            "path": "acm/acm-id",
            "children": {
              "CertificateRequestorFunction": {
                "id": "CertificateRequestorFunction",
                "path": "acm/acm-id/CertificateRequestorFunction",
                "children": {
                  "ServiceRole": {
                    "id": "ServiceRole",
                    "path": "acm/acm-id/CertificateRequestorFunction/ServiceRole",
                    "children": {
                      "Resource": {
                        "id": "Resource",
                        "path": "acm/acm-id/CertificateRequestorFunction/ServiceRole/Resource",
                        "attributes": {
                          "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                          "aws:cdk:cloudformation:props": {
                            "assumeRolePolicyDocument": {
                              "Statement": [
                                {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                  }
                                }
                              ],
                              "Version": "2012-10-17"
                            },
                            "managedPolicyArns": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                                  ]
                                ]
                              }
                            ]
                          }
                        }
                      },
                      "DefaultPolicy": {
                        "id": "DefaultPolicy",
                        "path": "acm/acm-id/CertificateRequestorFunction/ServiceRole/DefaultPolicy",
                        "children": {
                          "Resource": {
                            "id": "Resource",
                            "path": "acm/acm-id/CertificateRequestorFunction/ServiceRole/DefaultPolicy/Resource",
                            "attributes": {
                              "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                              "aws:cdk:cloudformation:props": {
                                "policyDocument": {
                                  "Statement": [
                                    {
                                      "Action": [
                                        "acm:RequestCertificate",
                                        "acm:DescribeCertificate",
                                        "acm:DeleteCertificate"
                                      ],
                                      "Effect": "Allow",
                                      "Resource": "*"
                                    },
                                    {
                                      "Action": "route53:GetChange",
                                      "Effect": "Allow",
                                      "Resource": "*"
                                    },
                                    {
                                      "Action": "route53:changeResourceRecordSets",
                                      "Effect": "Allow",
                                      "Resource": {
                                        "Fn::Join": [
                                          "",
                                          [
                                            "arn:",
                                            {
                                              "Ref": "AWS::Partition"
                                            },
                                            ":route53:::hostedzone/",
                                            {
                                              "Ref": "zoneidssmParameter"
                                            }
                                          ]
                                        ]
                                      }
                                    }
                                  ],
                                  "Version": "2012-10-17"
                                },
                                "policyName": "acmidCertificateRequestorFunctionServiceRoleDefaultPolicy482EB8C8",
                                "roles": [
                                  {
                                    "Ref": "acmidCertificateRequestorFunctionServiceRole1C31BF3D"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "Code": {
                    "id": "Code",
                    "path": "acm/acm-id/CertificateRequestorFunction/Code",
                    "children": {
                      "Stage": {
                        "id": "Stage",
                        "path": "acm/acm-id/CertificateRequestorFunction/Code/Stage"
                      },
                      "AssetBucket": {
                        "id": "AssetBucket",
                        "path": "acm/acm-id/CertificateRequestorFunction/Code/AssetBucket"
                      }
                    }
                  },
                  "Resource": {
                    "id": "Resource",
                    "path": "acm/acm-id/CertificateRequestorFunction/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                      "aws:cdk:cloudformation:props": {
                        "code": {
                          "s3Bucket": {
                            "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3BucketFCCD3A76"
                          },
                          "s3Key": {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::Select": [
                                    0,
                                    {
                                      "Fn::Split": [
                                        "||",
                                        {
                                          "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "Fn::Select": [
                                    1,
                                    {
                                      "Fn::Split": [
                                        "||",
                                        {
                                          "Ref": "AssetParameters19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2S3VersionKey07AF06B6"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            ]
                          }
                        },
                        "handler": "index.certificateRequestHandler",
                        "role": {
                          "Fn::GetAtt": [
                            "acmidCertificateRequestorFunctionServiceRole1C31BF3D",
                            "Arn"
                          ]
                        },
                        "runtime": "nodejs10.x",
                        "timeout": 900
                      }
                    }
                  }
                }
              },
              "CertificateRequestorResource": {
                "id": "CertificateRequestorResource",
                "path": "acm/acm-id/CertificateRequestorResource",
                "children": {
                  "Default": {
                    "id": "Default",
                    "path": "acm/acm-id/CertificateRequestorResource/Default"
                  }
                }
              }
            }
          },
          "AssetParameters": {
            "id": "AssetParameters",
            "path": "acm/AssetParameters",
            "children": {
              "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2": {
                "id": "19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2",
                "path": "acm/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2",
                "children": {
                  "S3Bucket": {
                    "id": "S3Bucket",
                    "path": "acm/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/S3Bucket"
                  },
                  "S3VersionKey": {
                    "id": "S3VersionKey",
                    "path": "acm/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/S3VersionKey"
                  },
                  "ArtifactHash": {
                    "id": "ArtifactHash",
                    "path": "acm/AssetParameters/19e461d2ff1a5b90438fed6ceee4c197d7efee8712a6f76d85b501ab20bfb1a2/ArtifactHash"
                  }
                }
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "acm/Exports",
            "children": {
              "Output{\"Fn::GetAtt\":[\"acmidCertificateRequestorResource9554A959\",\"Arn\"]}": {
                "id": "Output{\"Fn::GetAtt\":[\"acmidCertificateRequestorResource9554A959\",\"Arn\"]}",
                "path": "acm/Exports/Output{\"Fn::GetAtt\":[\"acmidCertificateRequestorResource9554A959\",\"Arn\"]}"
              }
            }
          }
        }
      },
      "cdn": {
        "id": "cdn",
        "path": "cdn",
        "children": {
          "s3bucket": {
            "id": "s3bucket",
            "path": "cdn/s3bucket"
          },
          "webhosting-origin": {
            "id": "webhosting-origin",
            "path": "cdn/webhosting-origin",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cdn/webhosting-origin/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
                  "aws:cdk:cloudformation:props": {
                    "cloudFrontOriginAccessIdentityConfig": {
                      "comment": "Allows CloudFront to reach the bucket"
                    }
                  }
                }
              }
            }
          },
          "webhosting-cdn": {
            "id": "webhosting-cdn",
            "path": "cdn/webhosting-cdn",
            "children": {
              "AliasConfigurationCert": {
                "id": "AliasConfigurationCert",
                "path": "cdn/webhosting-cdn/AliasConfigurationCert"
              },
              "CFDistribution": {
                "id": "CFDistribution",
                "path": "cdn/webhosting-cdn/CFDistribution",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CloudFront::Distribution",
                  "aws:cdk:cloudformation:props": {
                    "distributionConfig": {
                      "enabled": true,
                      "defaultRootObject": "index.html",
                      "httpVersion": "http2",
                      "priceClass": "PriceClass_100",
                      "ipv6Enabled": true,
                      "customErrorResponses": [
                        {
                          "errorCode": 400,
                          "responseCode": 200,
                          "responsePagePath": "/"
                        },
                        {
                          "errorCode": 403,
                          "responseCode": 200,
                          "responsePagePath": "/"
                        },
                        {
                          "errorCode": 404,
                          "responseCode": 200,
                          "responsePagePath": "/"
                        }
                      ],
                      "origins": [
                        {
                          "id": "origin1",
                          "domainName": {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::ImportValue": "frontend-bucket"
                                },
                                ".s3.",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ".",
                                {
                                  "Ref": "AWS::URLSuffix"
                                }
                              ]
                            ]
                          },
                          "originPath": "/build",
                          "s3OriginConfig": {
                            "originAccessIdentity": {
                              "Fn::Join": [
                                "",
                                [
                                  "origin-access-identity/cloudfront/",
                                  {
                                    "Ref": "webhostingorigin4CF2E4E2"
                                  }
                                ]
                              ]
                            }
                          },
                          "connectionAttempts": 3,
                          "connectionTimeout": 10
                        }
                      ],
                      "defaultCacheBehavior": {
                        "allowedMethods": [
                          "GET",
                          "HEAD"
                        ],
                        "cachedMethods": [
                          "GET",
                          "HEAD"
                        ],
                        "compress": true,
                        "forwardedValues": {
                          "queryString": false,
                          "cookies": {
                            "forward": "none"
                          }
                        },
                        "targetOriginId": "origin1",
                        "viewerProtocolPolicy": "redirect-to-https"
                      },
                      "aliases": [
                        "app.cloudevangelist.ca"
                      ],
                      "viewerCertificate": {
                        "acmCertificateArn": {
                          "Fn::ImportValue": "acm:ExportsOutputFnGetAttacmidCertificateRequestorResource9554A959Arn63B8B416"
                        },
                        "sslSupportMethod": "sni-only"
                      }
                    }
                  }
                }
              }
            }
          },
          "cdn-dist-id": {
            "id": "cdn-dist-id",
            "path": "cdn/cdn-dist-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cdn/cdn-dist-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "webhostingcdnCFDistribution1D75AAA9"
                    },
                    "name": "/dev/app-distribution-id"
                  }
                }
              }
            }
          },
          "cdn-url": {
            "id": "cdn-url",
            "path": "cdn/cdn-url",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cdn/cdn-url/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Fn::GetAtt": [
                              "webhostingcdnCFDistribution1D75AAA9",
                              "DomainName"
                            ]
                          }
                        ]
                      ]
                    },
                    "name": "/dev/app-cdn-url"
                  }
                }
              }
            }
          },
          "Exports": {
            "id": "Exports",
            "path": "cdn/Exports",
            "children": {
              "Output{\"Fn::GetAtt\":[\"webhostingcdnCFDistribution1D75AAA9\",\"DomainName\"]}": {
                "id": "Output{\"Fn::GetAtt\":[\"webhostingcdnCFDistribution1D75AAA9\",\"DomainName\"]}",
                "path": "cdn/Exports/Output{\"Fn::GetAtt\":[\"webhostingcdnCFDistribution1D75AAA9\",\"DomainName\"]}"
              }
            }
          }
        }
      },
      "route53": {
        "id": "route53",
        "path": "route53",
        "children": {
          "hosted-zone": {
            "id": "hosted-zone",
            "path": "route53/hosted-zone",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "route53/hosted-zone/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Route53::HostedZone",
                  "aws:cdk:cloudformation:props": {
                    "name": "cloudevangelist.ca."
                  }
                }
              }
            }
          },
          "cdn-record": {
            "id": "cdn-record",
            "path": "route53/cdn-record",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "route53/cdn-record/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Route53::RecordSet",
                  "aws:cdk:cloudformation:props": {
                    "name": "app.cloudevangelist.ca.",
                    "type": "A",
                    "aliasTarget": {
                      "hostedZoneId": "Z2FDTNDATAQYW2",
                      "dnsName": {
                        "Fn::ImportValue": "cdn:ExportsOutputFnGetAttwebhostingcdnCFDistribution1D75AAA9DomainName561669FE"
                      }
                    },
                    "hostedZoneId": {
                      "Ref": "hostedzone0562BB58"
                    }
                  }
                }
              }
            }
          },
          "zone-id": {
            "id": "zone-id",
            "path": "route53/zone-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "route53/zone-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SSM::Parameter",
                  "aws:cdk:cloudformation:props": {
                    "type": "String",
                    "value": {
                      "Ref": "hostedzone0562BB58"
                    },
                    "name": "/dev/zone-id"
                  }
                }
              }
            }
          }
        }
      },
      "cloudtrail": {
        "id": "cloudtrail",
        "path": "cloudtrail",
        "children": {
          "cloudtrail-id": {
            "id": "cloudtrail-id",
            "path": "cloudtrail/cloudtrail-id",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "cloudtrail/cloudtrail-id/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::CloudTrail::Trail",
                  "aws:cdk:cloudformation:props": {
                    "isLogging": true,
                    "s3BucketName": {
                      "Fn::ImportValue": "s3buckets:ExportsOutputRefcloudtrail82DEEC259B860ECF"
                    },
                    "enableLogFileValidation": true,
                    "eventSelectors": [],
                    "includeGlobalServiceEvents": true,
                    "isMultiRegionTrail": true,
                    "trailName": "serverless-dev-trail"
                  }
                }
              }
            }
          }
        }
      },
      "kibana": {
        "id": "kibana",
        "path": "kibana",
        "children": {
          "esdomain": {
            "id": "esdomain",
            "path": "kibana/esdomain",
            "attributes": {
              "aws:cdk:cloudformation:type": "AWS::Elasticsearch::Domain",
              "aws:cdk:cloudformation:props": {
                "accessPolicies": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "AWS": "*"
                      },
                      "Action": "es:*",
                      "Resource": "*"
                    }
                  ]
                },
                "domainName": "serverless-dev-domain",
                "ebsOptions": {
                  "ebsEnabled": true,
                  "volumeSize": 10,
                  "volumeType": "gp2"
                },
                "elasticsearchClusterConfig": {
                  "dedicatedMasterEnabled": false,
                  "instanceCount": 1,
                  "instanceType": "t2.small.elasticsearch"
                },
                "elasticsearchVersion": "7.4",
                "vpcOptions": {
                  "securityGroupIds": [
                    {
                      "Fn::ImportValue": "security-stack:ExportsOutputFnGetAttkibanasg882A09E7GroupIdABF7D495"
                    }
                  ],
                  "subnetIds": [
                    {
                      "Fn::ImportValue": "vpc:ExportsOutputRefdevVPCPrivateSubnet2SubnetAA0D521D667E9B43"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}